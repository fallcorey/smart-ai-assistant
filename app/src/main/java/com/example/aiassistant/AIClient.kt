package com.example.aiassistant

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.delay
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONObject
import org.jsoup.Jsoup
import java.util.concurrent.TimeUnit

class AIClient {
    
    private val client = OkHttpClient.Builder()
        .connectTimeout(30L, TimeUnit.SECONDS)
        .readTimeout(30L, TimeUnit.SECONDS)
        .writeTimeout(30L, TimeUnit.SECONDS)
        .build()
    
    suspend fun getAIResponse(userMessage: String, context: String = ""): String = withContext(Dispatchers.IO) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ API
            return@withContext processAdvancedAIResponse(userMessage, context)
        } catch (e: Exception) {
            return@withContext "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        }
    }
    
    private suspend fun processAdvancedAIResponse(userMessage: String, context: String): String {
        val message = userMessage.lowercase()
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        return when {
            // üîç –ü–û–ò–°–ö –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            message.contains("–Ω–∞–π–¥–∏") || message.contains("–ø–æ–∏—Å–∫") || message.contains("–≥—É–≥–ª") -> {
                val query = extractSearchQuery(userMessage)
                if (query.isNotEmpty()) {
                    return performWebSearch(query)
                }
                "üîç –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏? –£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å."
            }
            
            // üìä –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ò –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê
            message.contains("–ø–æ—Å—á–∏—Ç–∞–π") || message.contains("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç") || 
            message.contains("+") || message.contains("-") || message.contains("*") || message.contains("/") -> {
                calculateMathExpression(userMessage)
            }
            
            // üïê –í–†–ï–ú–Ø –ò –î–ê–¢–ê
            message.contains("–≤—Ä–µ–º—è") || message.contains("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") -> getCurrentTime()
            message.contains("–¥–∞—Ç–∞") || message.contains("–∫–∞–∫–æ–µ —á–∏—Å–ª–æ") -> getCurrentDate()
            message.contains("–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏") -> getCurrentDayOfWeek()
            
            // üå§Ô∏è –ü–û–ì–û–î–ê
            message.contains("–ø–æ–≥–æ–¥–∞") -> "üå§Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '–ü–æ–≥–æ–¥–∞' –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
            
            // üìù –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –ó–ê–î–ê–ß–ò
            message.contains("–Ω–∞–ø–æ–º–Ω–∏") || message.contains("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ") -> "‚è∞ –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
            message.contains("–∑–∞–¥–∞—á–∞") || message.contains("todo") -> "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
            
            // üéµ –ú–£–ó–´–ö–ê –ò –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
            message.contains("–º—É–∑—ã–∫–∞") || message.contains("–ø–µ—Å–Ω—è") -> "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫–æ—Ä–æ!"
            message.contains("—à—É—Ç–∫–∞") || message.contains("–∞–Ω–µ–∫–¥–æ—Ç") -> tellJoke()
            message.contains("—Ñ–∞–∫—Ç") -> tellInterestingFact()
            
            // üìû –ö–û–ù–¢–ê–ö–¢–´ –ò –°–û–û–ë–©–ï–ù–ò–Ø
            message.contains("–ø–æ–∑–≤–æ–Ω–∏") || message.contains("–∑–≤–æ–Ω–æ–∫") -> "üìû –§—É–Ω–∫—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            message.contains("—Å–º—Å") || message.contains("—Å–æ–æ–±—â–µ–Ω–∏–µ") -> "üí¨ SMS —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            
            // üìç –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï
            message.contains("–≥–¥–µ —è") || message.contains("–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ") -> "üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            message.contains("–º–∞—Ä—à—Ä—É—Ç") || message.contains("–∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å") -> "üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
            
            // ‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´
            message.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") -> "‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ß–∞—Å—ã"
            message.contains("—Ç–∞–π–º–µ—Ä") -> "‚è±Ô∏è –¢–∞–π–º–µ—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"
            message.contains("—è—Ä–∫–æ—Å—Ç—å") -> "‚òÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            message.contains("–∑–≤–æ–Ω–æ–∫") -> "üîä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ"
            
            // üìö –û–ë–£–ß–ï–ù–ò–ï –ò –ó–ù–ê–ù–ò–Ø
            message.contains("–æ–±—ä—è—Å–Ω–∏") || message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") -> "üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ"
            message.contains("–ø–µ—Ä–µ–≤–æ–¥") || message.contains("translate") -> "üåç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"
            message.contains("—Å–∏–Ω–æ–Ω–∏–º") -> "üìñ –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–∫–æ—Ä–æ"
            
            // üéÆ –ò–ì–†–´ –ò –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
            message.contains("–∏–≥—Ä–∞") || message.contains("—Å—ã–≥—Ä–∞–µ–º") -> "üéÆ –ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            message.contains("–∑–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ") -> "üéØ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
            message.contains("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞") -> "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
            
            // üí∞ –§–ò–ù–ê–ù–°–´ –ò –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø
            message.contains("–∫—É—Ä—Å") || message.contains("–¥–æ–ª–ª–∞—Ä") || message.contains("–µ–≤—Ä–æ") -> "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            message.contains("–∫–æ–Ω–≤–µ—Ä—Ç") || message.contains("convert") -> "üíµ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω"
            
            // üè• –ó–î–û–†–û–í–¨–ï –ò –°–ü–û–†–¢
            message.contains("–∫–∞–ª–æ—Ä–∏–∏") || message.contains("–¥–∏–µ—Ç–∞") -> "üçé –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            message.contains("–ø—É–ª—å—Å") || message.contains("–¥–∞–≤–ª–µ–Ω–∏–µ") -> "‚ù§Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
            message.contains("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞") -> "üèÉ‚Äç‚ôÇÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è"
            
            // üç≥ –ö–£–õ–ò–ù–ê–†–ò–Ø
            message.contains("—Ä–µ—Ü–µ–ø—Ç") || message.contains("–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å") -> "üç≥ –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω"
            message.contains("–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å") -> "üìä –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è"
            
            // üìñ –ß–¢–ï–ù–ò–ï –ò –ö–ù–ò–ì–ò
            message.contains("–∫–Ω–∏–≥–∞") || message.contains("–ø–æ—á–∏—Ç–∞—Ç—å") -> "üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            message.contains("—Ü–∏—Ç–∞—Ç–∞") -> "üí´ –¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è"
            
            // üé® –¢–í–û–†–ß–ï–°–¢–í–û
            message.contains("–Ω–∞—Ä–∏—Å—É–π") || message.contains("—Ä–∏—Å—É–Ω–æ–∫") -> "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            message.contains("—Å—Ç–∏—Ö") || message.contains("–ø–æ—ç–∑–∏—è") -> "‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏—Ö–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
            message.contains("–∏—Å—Ç–æ—Ä–∏—è") -> "üìñ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π –ø–æ—è–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º"
            
            // üíº –†–ê–ë–û–¢–ê –ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–¨
            message.contains("–≤—Å—Ç—Ä–µ—á–∞") || message.contains("–∫–∞–ª–µ–Ω–¥–∞—Ä—å") -> "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"
            message.contains("–æ—Ç—á–µ—Ç") || message.contains("–¥–æ–∫—É–º–µ–Ω—Ç") -> "üìÑ –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            
            // üõí –ü–û–ö–£–ü–ö–ò
            message.contains("–∫—É–ø–∏—Ç—å") || message.contains("–ø–æ–∫—É–ø–∫") -> "üõí –ü–æ–º–æ—â—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è"
            message.contains("—Ü–µ–Ω–∞") || message.contains("—Å—Ç–æ–∏–º–æ—Å—Ç—å") -> "üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
            
            // üöó –¢–†–ê–ù–°–ü–û–†–¢
            message.contains("—Ç–∞–∫—Å–∏") -> "üöï –í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            message.contains("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ") || message.contains("–∞–≤—Ç–æ–±—É—Å") -> "üöå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è"
            
            // üí¨ –û–ë–©–ï–ù–ò–ï
            else -> generateSmartResponse(userMessage, context)
        }
    }
    
    private fun extractSearchQuery(message: String): String {
        val patterns = listOf(
            "–Ω–∞–π–¥–∏ (.+)" to 1,
            "–ø–æ–∏—Å–∫ (.+)" to 1,
            "–≥—É–≥–ª (.+)" to 1,
            "–Ω–∞–π—Ç–∏ (.+)" to 1
        )
        
        for ((pattern, group) in patterns) {
            val regex = pattern.toRegex()
            val match = regex.find(message.lowercase())
            if (match != null) {
                return match.groupValues[group].trim()
            }
        }
        return message
    }
    
    private suspend fun performWebSearch(query: String): String {
        return try {
            val searchUrl = "https://www.google.com/search?q=${query.replace(" ", "+")}"
            val doc = Jsoup.connect(searchUrl)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .get()
            
            val results = doc.select("h3").take(3).map { it.text() }
            
            if (results.isNotEmpty()) {
                "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$query\":**\n\n" +
                results.joinToString("\n\n") { "‚Ä¢ $it" } +
                "\n\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä."
            } else {
                "‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"$query\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."
            }
        } catch (e: Exception) {
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
        }
    }
    
    private fun calculateMathExpression(expression: String): String {
        return try {
            val cleanExpr = expression
                .replace("–ø–æ—Å—á–∏—Ç–∞–π", "")
                .replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "")
                .replace(" ", "")
                .replace(",", ".")
            
            // –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            when {
                cleanExpr.contains("+") -> {
                    val parts = cleanExpr.split("+")
                    val result = parts.sumOf { it.toDouble() }
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("-") -> {
                    val parts = cleanExpr.split("-")
                    val result = parts[0].toDouble() - parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("*") -> {
                    val parts = cleanExpr.split("*")
                    val result = parts[0].toDouble() * parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("/") -> {
                    val parts = cleanExpr.split("/")
                    if (parts[1].toDouble() == 0.0) "‚ùå –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
                    else {
                        val result = parts[0].toDouble() / parts[1].toDouble()
                        "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                    }
                }
                else -> "‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è."
        }
    }
    
    private fun getCurrentTime(): String {
        val time = java.time.LocalTime.now()
            .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"))
        return "üïê –°–µ–π—á–∞—Å $time"
    }
    
    private fun getCurrentDate(): String {
        val date = java.time.LocalDate.now()
            .format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy"))
        return "üìÖ –°–µ–≥–æ–¥–Ω—è $date"
    }
    
    private fun getCurrentDayOfWeek(): String {
        val days = listOf("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
        val dayOfWeek = java.time.LocalDate.now().dayOfWeek.value - 1
        return "üìÜ –°–µ–≥–æ–¥–Ω—è ${days[dayOfWeek]}"
    }
    
    private fun tellJoke(): String {
        val jokes = listOf(
            "ü§£ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
            "üòÑ –ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –±–∞–π—Ç –¥—Ä—É–≥–æ–º—É? –Ø —Ç–µ–±—è –Ω–µ –±–∏—Ç, —è —Å —Ç–æ–±–æ–π!",
            "üòÇ –ü–æ—á–µ–º—É Java-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ C#!",
            "üòä –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç null, –≤—Å—Ç—Ä–µ—Ç–∏–≤ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞? Null-–∑–¥–∞–≤—Å—Ç–≤—É–π!",
            "ü§≠ –ü–æ—á–µ–º—É Python —Å—Ç–∞–ª —Ç–∞–∫–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∑–º–µ–∏–Ω–æ–µ –æ–±–∞—è–Ω–∏–µ!"
        )
        return jokes.random()
    }
    
    private fun tellInterestingFact(): String {
        val facts = listOf(
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 2.5 –ø–µ—Ç–∞–±–∞–π—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!",
            "üåç –ó–µ–º–ª—è - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –≥–¥–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Ç–æ–Ω–∏–∫–∞ –ø–ª–∏—Ç.",
            "üêú –ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç!",
            "üì± –ü–µ—Ä–≤—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å—Ç–æ–∏–ª 4000 –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ –≤–µ—Å–∏–ª –ø–æ—á—Ç–∏ 1 –∫–≥!",
            "üí° –õ–∞–º–ø–æ—á–∫–∞ –≥–æ—Ä–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º."
        )
        return "üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: ${facts.random()}"
    }
    
    private fun generateSmartResponse(message: String, context: String): String {
        val responses = listOf(
            "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ...",
            "üí≠ –ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            "üéØ –ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ!",
            "üöÄ –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è...",
            "üí° –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º—ã—Å–ª–µ–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É...",
            "üîç –î–∞–≤–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç—É —Ç–µ–º—É –≤–º–µ—Å—Ç–µ!",
            "üåü –ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞.",
            "üìñ –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É...",
            "üéì –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...",
            "üíº –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º!"
        )
        
        val baseResponse = responses.random()
        
        return when {
            message.contains("?") -> "$baseResponse\n\n–í–∞—à –≤–æ–ø—Ä–æ—Å: \"$message\"\n\n" +
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n" +
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n" +
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π AI –º–æ–¥–µ–ª–∏"
            
            message.length > 50 -> "$baseResponse\n\n–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
            
            else -> "$baseResponse\n\n–í—ã —Å–∫–∞–∑–∞–ª–∏: \"$message\"\n\n" +
                "–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å? –Ø —É–º–µ—é:\n" +
                "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n" +
                "‚Ä¢ üìä –í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—á–µ—Ç—ã\n" +
                "‚Ä¢ üïê –°–æ–æ–±—â–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É\n" +
                "‚Ä¢ üéØ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n" +
                "‚Ä¢ üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                "‚Ä¢ üéµ –£–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞\n" +
                "‚Ä¢ üìç –†–∞–±–æ—Ç–∞—Ç—å —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º\n" +
                "‚Ä¢ üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã\n" +
                "‚Ä¢ üè• –ü–æ–º–æ–≥–∞—Ç—å —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º\n" +
                "‚Ä¢ üç≥ –ò—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã\n" +
                "‚Ä¢ üìñ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏\n" +
                "‚Ä¢ üé® –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n" +
                "‚Ä¢ üíº –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–∞–±–æ—Ç–æ–π\n" +
                "‚Ä¢ üõí –ê—Å—Å–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏\n" +
                "‚Ä¢ üöó –ü–æ–º–æ–≥–∞—Ç—å —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º"
        }
    }
}
