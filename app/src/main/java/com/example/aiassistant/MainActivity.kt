package com.example.aiassistant

import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.speech.RecognizerIntent
import android.os.Handler
import android.os.Looper
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {
    
    private lateinit var recyclerViewChat: RecyclerView
    private lateinit var editTextMessage: EditText
    private lateinit var buttonSend: Button
    private lateinit var buttonVoice: ImageButton
    private lateinit var buttonClear: Button
    private lateinit var progressBar: ProgressBar
    
    private lateinit var chatAdapter: ChatAdapter
    private val chatMessages = mutableListOf<ChatMessage>()
    private val handler = Handler(Looper.getMainLooper())
    private lateinit var voiceManager: VoiceManager
    private lateinit var alarmManager: AlarmManager
    private var isVoiceResponseEnabled = true
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    private val speechRecognizer = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        try {
            val results = result.data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
            if (!results.isNullOrEmpty()) {
                val spokenText = results[0]
                editTextMessage.setText(spokenText)
                sendMessage(spokenText)
            }
        } catch (e: Exception) {
            Toast.makeText(this, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ—Å–ª–µ setContentView
        voiceManager = VoiceManager(this)
        alarmManager = AlarmManager(this)
        
        initViews()
        setupRecyclerView()
        setupClickListeners()
        
        addWelcomeMessage()
    }
    
    private fun initViews() {
        recyclerViewChat = findViewById(R.id.recyclerViewChat)
        editTextMessage = findViewById(R.id.editTextMessage)
        buttonSend = findViewById(R.id.buttonSend)
        buttonVoice = findViewById(R.id.buttonVoice)
        buttonClear = findViewById(R.id.buttonClear)
        progressBar = findViewById(R.id.progressBar)
    }
    
    private fun setupRecyclerView() {
        chatAdapter = ChatAdapter(chatMessages)
        recyclerViewChat.layoutManager = LinearLayoutManager(this)
        recyclerViewChat.adapter = chatAdapter
    }
    
    private fun setupClickListeners() {
        buttonSend.setOnClickListener {
            val message = editTextMessage.text.toString().trim()
            if (message.isNotEmpty()) {
                sendMessage(message)
                editTextMessage.text.clear()
            } else {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", Toast.LENGTH_SHORT).show()
            }
        }
        
        buttonVoice.setOnClickListener {
            startVoiceInput()
        }
        
        buttonClear.setOnClickListener {
            clearChat()
            addWelcomeMessage()
        }
    }
    
    private fun sendMessage(message: String) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val userMessage = ChatMessage(message, false)
        chatMessages.add(userMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progressBar.visibility = View.VISIBLE
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI
        handler.postDelayed({
            progressBar.visibility = View.GONE
            
            val response = generateAIResponse(message)
            val aiMessage = ChatMessage(response, true)
            chatMessages.add(aiMessage)
            chatAdapter.notifyItemInserted(chatMessages.size - 1)
            
            // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (isVoiceResponseEnabled && voiceManager.isReady()) {
                val speechText = prepareTextForSpeech(response)
                voiceManager.speak(speechText)
            }
            
            scrollToBottom()
        }, 1000)
        
        scrollToBottom()
    }
    
    private fun prepareTextForSpeech(text: String): String {
        return text
            .replace(Regex("[üéØüïêüìÖüìÜ‚è∞üí¨üéµüìç‚öôÔ∏èüîä‚òÄÔ∏èüéÆüìöüí∞üè•üç≥üòÇü§£üòÑüòäü§≠üëãü§îüéâüé§üå§Ô∏è‚ÑπÔ∏è‚úÖ‚ùåüîç‚è∞‚è±Ô∏èüîî]"), "")
            .replace(Regex("\\*\\*(.*?)\\*\\*"), "$1")
            .replace(Regex("\\*(.*?)\\*"), "$1")
            .replace("‚Ä¢", " - ")
            .replace("...", ".")
            .replace("  ", " ")
            .trim()
    }
    
    private fun generateAIResponse(userMessage: String): String {
        val message = userMessage.lowercase()
        
        return when {
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            message.contains("–ø—Ä–∏–≤–µ—Ç") || message.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") -> 
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
            // –í–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            message.contains("–∫–∞–∫ –¥–µ–ª–∞") || message.contains("–∫–∞–∫ —Ç—ã") -> 
                "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ê –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
            
            // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            message.contains("—Å–ø–∞—Å–∏–±–æ") || message.contains("–±–ª–∞–≥–æ–¥–∞—Ä—é") -> 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å!"
            
            // –í—Ä–µ–º—è
            message.contains("–≤—Ä–µ–º—è") || message.contains("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") -> {
                val time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
                "–°–µ–π—á–∞—Å $time"
            }
            
            // –î–∞—Ç–∞
            message.contains("–¥–∞—Ç–∞") || message.contains("–∫–∞–∫–æ–µ —á–∏—Å–ª–æ") -> {
                val date = SimpleDateFormat("dd MMMM yyyy", Locale("ru", "RU")).format(Date())
                "–°–µ–≥–æ–¥–Ω—è $date"
            }
            
            // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            message.contains("–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏") -> {
                val days = arrayOf("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞")
                val calendar = Calendar.getInstance()
                val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1
                "–°–µ–≥–æ–¥–Ω—è ${days[dayOfWeek]}"
            }
            
            // –ü–æ–≥–æ–¥–∞
            message.contains("–ø–æ–≥–æ–¥–∞") -> 
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –æ –ø–æ–≥–æ–¥–µ. " +
                "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."
            
            // –ë—É–¥–∏–ª—å–Ω–∏–∫–∏
            message.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") || message.contains("—Ä–∞–∑–±—É–¥–∏") -> {
                handleAlarmCommand(message)
            }
            
            // –¢–∞–π–º–µ—Ä—ã
            message.contains("—Ç–∞–π–º–µ—Ä") || message.contains("–∑–∞—Å–µ–∫–∏") -> {
                handleTimerCommand(message)
            }
            
            // –ü–æ–º–æ—â—å
            message.contains("–ø–æ–º–æ—â—å") || message.contains("–∫–æ–º–∞–Ω–¥—ã") || message.contains("—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å") -> 
                """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚Ä¢ –û–±—â–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç, –ö–∞–∫ –¥–µ–ª–∞, –°–ø–∞—Å–∏–±–æ
‚Ä¢ –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: –í—Ä–µ–º—è, –î–∞—Ç–∞, –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏  
‚Ä¢ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: –†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É
‚Ä¢ –†–∞—Å—á–µ—Ç—ã: –ü–æ—Å—á–∏—Ç–∞–π 2+2
‚Ä¢ –ü–æ–≥–æ–¥–∞: –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?
‚Ä¢ –ë—É–¥–∏–ª—å–Ω–∏–∫–∏: –ü–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30
‚Ä¢ –¢–∞–π–º–µ—Ä—ã: –ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ì–æ–ª–æ—Å: –í–∫–ª—é—á–∏ –≥–æ–ª–æ—Å –∏–ª–∏ –í—ã–∫–ª—é—á–∏ –≥–æ–ª–æ—Å
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ë—ã—Å—Ç—Ä–µ–µ, –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –í—ã—à–µ, –ù–∏–∂–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!"""
            
            // –®—É—Ç–∫–∏
            message.contains("—à—É—Ç–∫–∞") || message.contains("–∞–Ω–µ–∫–¥–æ—Ç") -> {
                val jokes = listOf(
                    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 —Ä–∞–≤–Ω–æ Dec 25!",
                    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –±–∞–π—Ç –¥—Ä—É–≥–æ–º—É? –Ø —Ç–µ–±—è –Ω–µ –±–∏—Ç, —è —Å —Ç–æ–±–æ–π!",
                    "–ü–æ—á–µ–º—É Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ C sharp!",
                    "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç null, –≤—Å—Ç—Ä–µ—Ç–∏–≤ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞? Null –∑–¥–∞–≤—Å—Ç–≤—É–π!",
                    "–ü–æ—á–µ–º—É Python —Å—Ç–∞–ª —Ç–∞–∫–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∑–º–µ–∏–Ω–æ–µ –æ–±–∞—è–Ω–∏–µ!"
                )
                jokes.random()
            }
            
            // –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            message.contains("–ø–æ—Å—á–∏—Ç–∞–π") || message.contains("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç") || 
            message.contains("+") || message.contains("-") || message.contains("*") || message.contains("/") -> {
                calculateMathExpression(message)
            }
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º
            message.contains("–≥–æ–ª–æ—Å") && message.contains("–≤—ã–∫–ª—é—á–∏") -> {
                isVoiceResponseEnabled = false
                voiceManager.stop()
                "–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã"
            }
            
            message.contains("–≥–æ–ª–æ—Å") && message.contains("–≤–∫–ª—é—á–∏") -> {
                isVoiceResponseEnabled = true
                "–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã"
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
            message.contains("–±—ã—Å—Ç—Ä–µ–µ") || message.contains("—É—Å–∫–æ—Ä") -> {
                voiceManager.setSpeechRate(1.2f)
                "–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞"
            }
            
            message.contains("–º–µ–¥–ª–µ–Ω") || message.contains("–∑–∞–º–µ–¥") -> {
                voiceManager.setSpeechRate(0.7f)
                "–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ —É–º–µ–Ω—å—à–µ–Ω–∞"
            }
            
            message.contains("–≤—ã—à–µ") && message.contains("–≥–æ–ª–æ—Å") -> {
                voiceManager.setPitch(1.4f)
                "–¢–æ–Ω –≥–æ–ª–æ—Å–∞ –ø–æ–≤—ã—à–µ–Ω"
            }
            
            message.contains("–Ω–∏–∂–µ") && message.contains("–≥–æ–ª–æ—Å") -> {
                voiceManager.setPitch(0.8f)
                "–¢–æ–Ω –≥–æ–ª–æ—Å–∞ –ø–æ–Ω–∏–∂–µ–Ω"
            }
            
            // –ü—Ä–æ—â–∞–Ω–∏—è
            message.contains("–ø–æ–∫–∞") || message.contains("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è") -> 
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å!"
            
            // –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            else -> 
                "–Ø –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –ü–æ–∫–∞ –º–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å. " +
                "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ - —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –≤—Ä–µ–º–µ–Ω–∏, –¥–∞—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞–µ–º—Å—è!"
        }
    }
    
    private fun handleAlarmCommand(message: String): String {
        val time = alarmManager.parseTimeFromText(message)
        return if (time != null) {
            val (hours, minutes) = time
            val success = alarmManager.setAlarm(hours, minutes)
            if (success) {
                "‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ $hours:$minutes"
            } else {
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ß–∞—Å—ã."
            }
        } else {
            "‚ùå –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞. –°–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30'"
        }
    }
    
    private fun handleTimerCommand(message: String): String {
        val duration = alarmManager.parseDurationFromText(message)
        return if (duration != null) {
            val success = alarmManager.setTimer(duration)
            if (success) {
                val minutes = duration / 60
                val seconds = duration % 60
                if (minutes > 0) {
                    "‚è±Ô∏è –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ $minutes –º–∏–Ω—É—Ç${if (seconds > 0) " $seconds —Å–µ–∫—É–Ω–¥" else ""}"
                } else {
                    "‚è±Ô∏è –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ $seconds —Å–µ–∫—É–Ω–¥"
                }
            } else {
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ß–∞—Å—ã."
            }
        } else {
            "‚ùå –ù–µ –ø–æ–Ω—è–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞. –°–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç'"
        }
    }
    
    private fun calculateMathExpression(expression: String): String {
        return try {
            val cleanExpr = expression
                .replace("–ø–æ—Å—á–∏—Ç–∞–π", "")
                .replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "")
                .replace(" ", "")
                .replace(",", ".")
            
            when {
                cleanExpr.contains("+") -> {
                    val parts = cleanExpr.split("+")
                    val result = parts[0].toDouble() + parts[1].toDouble()
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("-") -> {
                    val parts = cleanExpr.split("-")
                    val result = parts[0].toDouble() - parts[1].toDouble()
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("*") -> {
                    val parts = cleanExpr.split("*")
                    val result = parts[0].toDouble() * parts[1].toDouble()
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("/") -> {
                    val parts = cleanExpr.split("/")
                    if (parts[1].toDouble() == 0.0) "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
                    else {
                        val result = parts[0].toDouble() / parts[1].toDouble()
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                    }
                }
                else -> "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            }
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2+2, 10-5, 3*4, 15/3)"
        }
    }
    
    private fun startVoiceInput() {
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.RECORD_AUDIO) 
            == PackageManager.PERMISSION_GRANTED) {
            
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
                putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                putExtra(RecognizerIntent.EXTRA_PROMPT, "–ì–æ–≤–æ—Ä–∏—Ç–µ...")
            }
            
            try {
                speechRecognizer.launch(intent)
            } catch (e: Exception) {
                Toast.makeText(this, "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", Toast.LENGTH_SHORT).show()
            }
        } else {
            requestPermissions(arrayOf(android.Manifest.permission.RECORD_AUDIO), 1)
        }
    }
    
    private fun addWelcomeMessage() {
        val welcomeMessage = ChatMessage(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–º–Ω—ã–π AI –ü–æ–º–æ—â–Ω–∏–∫!\n\n" +
            "–Ø –º–æ–≥—É:\n" +
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n" +
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å\n" +
            "‚Ä¢ –û–∑–≤—É—á–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã\n" +
            "‚Ä¢ –°–æ–æ–±—â–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É\n" +
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏\n" +
            "‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—á–µ—Ç—ã\n" +
            "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫–∏\n" +
            "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã\n\n" +
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω!\n\n" +
            "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n" +
            "‚Ä¢ '–ü–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30'\n" +
            "‚Ä¢ '–¢–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç'\n" +
            "‚Ä¢ '–í–∫–ª—é—á–∏ –≥–æ–ª–æ—Å'\n" +
            "‚Ä¢ '–ë—ã—Å—Ç—Ä–µ–µ'",
            true
        )
        chatMessages.add(welcomeMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        scrollToBottom()
    }
    
    private fun clearChat() {
        chatMessages.clear()
        chatAdapter.notifyDataSetChanged()
    }
    
    private fun scrollToBottom() {
        recyclerViewChat.scrollToPosition(chatMessages.size - 1)
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1 && grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω", Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        voiceManager.shutdown()
    }
}

data class ChatMessage(
    val message: String,
    val isAI: Boolean
)
