package com.example.aiassistant

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.speech.RecognizerIntent
import android.os.Handler
import android.os.Looper
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {
    
    private lateinit var recyclerViewChat: RecyclerView
    private lateinit var editTextMessage: EditText
    private lateinit var buttonSend: Button
    private lateinit var buttonVoice: ImageButton
    private lateinit var buttonClear: Button
    private lateinit var progressBar: ProgressBar
    private lateinit var buttonFile: Button
    private lateinit var progressText: TextView
    
    private lateinit var chatAdapter: ChatAdapter
    private val chatMessages = mutableListOf<ChatMessage>()
    private val handler = Handler(Looper.getMainLooper())
    private lateinit var voiceManager: VoiceManager
    private lateinit var alarmManager: AlarmManager
    private lateinit var webSearchManager: WebSearchManager
    private lateinit var knowledgeManager: KnowledgeManager
    private lateinit var pdfManager: PDFManager
    private var isVoiceResponseEnabled = true
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    private val reminders = mutableListOf<String>()
    private var lastUserMessage = ""
    private var lastAIResponse = ""
    private var waitingForFeedback = false
    private var isProcessingPDF = false

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    private val speechRecognizer = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        try {
            val results = result.data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
            if (!results.isNullOrEmpty()) {
                val spokenText = results[0]
                editTextMessage.setText(spokenText)
                sendMessage(spokenText)
            }
        } catch (e: Exception) {
            Toast.makeText(this, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", Toast.LENGTH_SHORT).show()
        }
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    private val filePicker = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        if (uri != null) {
            handleFileSelection(uri)
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ—Å–ª–µ setContentView
        voiceManager = VoiceManager(this)
        alarmManager = AlarmManager(this)
        alarmManager.loadAlarms()
        webSearchManager = WebSearchManager()
        knowledgeManager = KnowledgeManager(this)
        pdfManager = PDFManager(this, knowledgeManager)
        
        initViews()
        setupRecyclerView()
        setupClickListeners()
        
        addWelcomeMessage()
    }
    
    private fun initViews() {
        recyclerViewChat = findViewById(R.id.recyclerViewChat)
        editTextMessage = findViewById(R.id.editTextMessage)
        buttonSend = findViewById(R.id.buttonSend)
        buttonVoice = findViewById(R.id.buttonVoice)
        buttonClear = findViewById(R.id.buttonClear)
        progressBar = findViewById(R.id.progressBar)
        buttonFile = findViewById(R.id.buttonFile)
        progressText = findViewById(R.id.progressText)
    }
    
    private fun setupRecyclerView() {
        chatAdapter = ChatAdapter(chatMessages)
        recyclerViewChat.layoutManager = LinearLayoutManager(this)
        recyclerViewChat.adapter = chatAdapter
    }
    
    private fun setupClickListeners() {
        buttonSend.setOnClickListener {
            val message = editTextMessage.text.toString().trim()
            if (message.isNotEmpty()) {
                sendMessage(message)
                editTextMessage.text.clear()
            } else {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", Toast.LENGTH_SHORT).show()
            }
        }
        
        buttonVoice.setOnClickListener {
            startVoiceInput()
        }
        
        buttonClear.setOnClickListener {
            clearChat()
            addWelcomeMessage()
        }
        
        buttonFile.setOnClickListener {
            if (!isProcessingPDF) {
                openFilePicker()
            } else {
                Toast.makeText(this, "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    private fun openFilePicker() {
        filePicker.launch("application/pdf")
    }
    
    private fun handleFileSelection(uri: Uri) {
        isProcessingPDF = true
        buttonFile.isEnabled = false
        progressBar.visibility = View.VISIBLE
        progressText.visibility = View.VISIBLE
        progressText.text = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF..."
        
        addAIResponse("üìñ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É PDF —Ñ–∞–π–ª–∞...", false)
        
        CoroutineScope(Dispatchers.IO).launch {
            try {
                pdfManager.learnFromPDF(uri)
                    .onEach { progress ->
                        runOnUiThread {
                            updateProgress(progress)
                        }
                    }
                    .collect { progress ->
                        if (progress.progress == 100) {
                            runOnUiThread {
                                progressBar.visibility = View.GONE
                                progressText.visibility = View.GONE
                                buttonFile.isEnabled = true
                                isProcessingPDF = false
                                addAIResponse(progress.message, false)
                            }
                        }
                    }
            } catch (e: Exception) {
                runOnUiThread {
                    progressBar.visibility = View.GONE
                    progressText.visibility = View.GONE
                    buttonFile.isEnabled = true
                    isProcessingPDF = false
                    addAIResponse("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${e.message}", false)
                }
            }
        }
    }
    
    private fun updateProgress(progress: PDFManager.ProcessingProgress) {
        progressBar.progress = progress.progress
        progressText.text = "${progress.step}: ${progress.progress}% - ${progress.message}"
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if (progress.progress < 100) {
            if (chatMessages.isNotEmpty() && chatMessages.last().isAI) {
                chatMessages.removeAt(chatMessages.size - 1)
            }
            addAIResponse("üîÑ ${progress.step}: ${progress.progress}%\n${progress.message}", false)
        }
    }
    
    private fun sendMessage(message: String) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if (waitingForFeedback) {
            handleFeedback(message)
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lastUserMessage = message
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val userMessage = ChatMessage(message, false)
        chatMessages.add(userMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progressBar.visibility = View.VISIBLE
        progressText.visibility = View.VISIBLE
        progressText.text = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (message.contains("–Ω–∞–π–¥–∏") || message.contains("–ø–æ–∏—Å–∫") || message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") || 
            message.contains("–∫—Ç–æ —Ç–∞–∫–æ–π") || message.contains("–Ω–æ–≤–æ—Å—Ç–∏") || message.contains("–ø–æ–≥–æ–¥–∞") ||
            message.contains("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π pdf") || message.contains("—Ñ–∞–∫—Ç—ã –∏–∑ pdf") ||
            message.contains("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ pdf")) {
            // –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            handleSearchQuery(message)
        } else {
            // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            handler.postDelayed({
                progressBar.visibility = View.GONE
                progressText.visibility = View.GONE
                val response = generateAIResponse(message)
                lastAIResponse = response
                addAIResponse(response, true)
            }, 1000)
        }
        
        scrollToBottom()
    }
    
    private fun handleFeedback(message: String) {
        when (message.lowercase()) {
            "–¥–∞", "üëç" -> {
                knowledgeManager.learn(lastUserMessage, lastAIResponse)
                addAIResponse("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ó–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–π. üß†", false)
            }
            "–Ω–µ—Ç", "üëé" -> {
                knowledgeManager.improveAnswer(lastUserMessage, false)
                addAIResponse("‚ùå –ü–æ–Ω—è–ª, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ –ø–æ–ª–µ–∑–µ–Ω. –£—á—Ç—É —ç—Ç–æ –≤ –±—É–¥—É—â–µ–º. " +
                        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ $lastUserMessage - —ç—Ç–æ [–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç]'", false)
            }
            "–Ω–µ –≤–∞–∂–Ω–æ", "ü§∑" -> {
                addAIResponse("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ! üòä", false)
            }
            else -> {
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                lastUserMessage = message
                val userMessage = ChatMessage(message, false)
                chatMessages.add(userMessage)
                chatAdapter.notifyItemInserted(chatMessages.size - 1)
                
                progressBar.visibility = View.VISIBLE
                progressText.visibility = View.VISIBLE
                progressText.text = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
                handler.postDelayed({
                    progressBar.visibility = View.GONE
                    progressText.visibility = View.GONE
                    val response = generateAIResponse(message)
                    lastAIResponse = response
                    addAIResponse(response, true)
                }, 1000)
            }
        }
        waitingForFeedback = false
        scrollToBottom()
    }
    
    private fun handleSearchQuery(message: String) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val response = when {
                    message.contains("–ø–æ–≥–æ–¥–∞") -> {
                        val city = extractSearchQuery(message, "–ø–æ–≥–æ–¥–∞")
                        if (city.isNotEmpty() && city != message) {
                            webSearchManager.getWeather(city)
                        } else {
                            webSearchManager.getWeather()
                        }
                    }
                    message.contains("–Ω–æ–≤–æ—Å—Ç–∏") -> {
                        val topic = extractSearchQuery(message, "–Ω–æ–≤–æ—Å—Ç–∏")
                        webSearchManager.getNews(topic)
                    }
                    message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") || message.contains("–∫—Ç–æ —Ç–∞–∫–æ–π") -> {
                        val query = extractSearchQuery(message, listOf("—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫—Ç–æ —Ç–∞–∫–æ–π"))
                        webSearchManager.getQuickAnswer(query)
                    }
                    else -> {
                        val query = extractSearchQuery(message, listOf("–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–Ω–∞–π—Ç–∏"))
                        webSearchManager.searchWeb(query)
                    }
                }
                
                runOnUiThread {
                    progressBar.visibility = View.GONE
                    progressText.visibility = View.GONE
                    lastAIResponse = response
                    addAIResponse(response, true)
                }
            } catch (e: Exception) {
                runOnUiThread {
                    progressBar.visibility = View.GONE
                    progressText.visibility = View.GONE
                    lastAIResponse = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}"
                    addAIResponse(lastAIResponse, true)
                }
            }
        }
    }
    
    private fun extractSearchQuery(message: String, keywords: Any): String {
        return when (keywords) {
            is String -> message.replace(keywords, "").trim()
            is List<*> -> {
                var result = message
                (keywords as List<String>).forEach { keyword ->
                    result = result.replace(keyword, "")
                }
                result.trim()
            }
            else -> message
        }
    }
    
    private fun addAIResponse(response: String, showFeedback: Boolean) {
        val aiMessage = ChatMessage(response, true)
        chatMessages.add(aiMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        if (showFeedback && !response.contains("‚ùå") && !response.contains("‚ö†Ô∏è") && 
            !response.contains("–ø–æ–º–æ—â—å") && !response.contains("–∫–æ–º–∞–Ω–¥—ã") &&
            lastUserMessage.isNotEmpty() && !lastUserMessage.contains("–∑–∞–ø–æ–º–Ω–∏")) {
            addFeedbackButtons()
            waitingForFeedback = true
        }
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (isVoiceResponseEnabled && voiceManager.isReady()) {
            val speechText = prepareTextForSpeech(response)
            voiceManager.speak(speechText)
        }
        
        scrollToBottom()
    }
    
    private fun addFeedbackButtons() {
        val feedbackMessage = ChatMessage(
            "ü§î **–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ —É—á–∏—Ç—å—Å—è!** –ë—ã–ª –ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?\n\n" +
            "üëç –î–∞  |  üëé –ù–µ—Ç  |  ü§∑ –ù–µ –≤–∞–∂–Ω–æ",
            true
        )
        chatMessages.add(feedbackMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        scrollToBottom()
    }
    
    private fun prepareTextForSpeech(text: String): String {
        return text
            .replace(Regex("[üéØüïêüìÖüìÜ‚è∞üí¨üéµüìç‚öôÔ∏èüîä‚òÄÔ∏èüéÆüìöüí∞üè•üç≥üòÇü§£üòÑüòäü§≠üëãü§îüéâüé§üå§Ô∏è‚ÑπÔ∏è‚úÖ‚ùåüîç‚è∞‚è±Ô∏èüîîüìãüì∞üîçüéØ‚ö†Ô∏è‚ùå‚ÑπÔ∏èüåßÔ∏è‚ùÑÔ∏èüå•Ô∏èüå§Ô∏èü§îüëçüëéü§∑üìäüß†üìñüìöüîçüîÑüìä]"), "")
            .replace(Regex("\\*\\*(.*?)\\*\\*"), "$1")
            .replace(Regex("\\*(.*?)\\*"), "$1")
            .replace("‚Ä¢", " - ")
            .replace("...", ".")
            .replace("  ", " ")
            .trim()
    }
    
    private fun generateAIResponse(userMessage: String): String {
        val message = userMessage.lowercase()
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        val learnedAnswer = knowledgeManager.findAnswer(message)
        if (learnedAnswer != null) {
            return "üß† " + learnedAnswer.answer + "\n\n*[–≠—Ç–æ –æ—Ç–≤–µ—Ç –∏–∑ –º–æ–µ–π –æ–±—É—á–∞–µ–º–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π]*"
        }
        
        return when {
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            message.contains("–ø—Ä–∏–≤–µ—Ç") || message.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") -> 
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
            // –í–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            message.contains("–∫–∞–∫ –¥–µ–ª–∞") || message.contains("–∫–∞–∫ —Ç—ã") -> 
                "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ê –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
            
            // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            message.contains("—Å–ø–∞—Å–∏–±–æ") || message.contains("–±–ª–∞–≥–æ–¥–∞—Ä—é") -> 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å!"
            
            // –û–±—É—á–µ–Ω–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã –∑–Ω–∞–Ω–∏–π
            message.contains("–∑–∞–ø–æ–º–Ω–∏") && message.contains("—á—Ç–æ") -> {
                handleLearningCommand(userMessage)
            }
            
            message.contains("–Ω–∞—É—á–∏") -> {
                "–ß—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è —á–µ–º—É-—Ç–æ, —Å–∫–∞–∂–∏—Ç–µ: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ [–≤–æ–ø—Ä–æ—Å] - —ç—Ç–æ [–æ—Ç–≤–µ—Ç]'"
            }
            
            message.contains("—á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å") || message.contains("—Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è") -> {
                knowledgeManager.getKnowledgeStats()
            }
            
            message.contains("–∑–∞–±—É–¥—å") -> {
                handleForgetCommand(userMessage)
            }
            
            // PDF –∫–æ–º–∞–Ω–¥—ã
            message.contains("–∑–∞–≥—Ä—É–∑–∏ pdf") || message.contains("–æ—Ç–∫—Ä–æ–π pdf") -> {
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÅ –§–∞–π–ª' –¥–ª—è –≤—ã–±–æ—Ä–∞ PDF —Ñ–∞–π–ª–∞, –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π pdf'"
            }
            
            message.contains("–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π pdf") || message.contains("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π pdf") -> {
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÅ –§–∞–π–ª' –¥–ª—è –≤—ã–±–æ—Ä–∞ PDF —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            }
            
            message.contains("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ pdf") || message.contains("–∞–Ω–∞–ª–∏–∑ pdf") -> {
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÅ –§–∞–π–ª' –¥–ª—è –≤—ã–±–æ—Ä–∞ PDF —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            }
            
            // –í—Ä–µ–º—è
            message.contains("–≤—Ä–µ–º—è") || message.contains("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") -> {
                val time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
                "–°–µ–π—á–∞—Å $time"
            }
            
            // –î–∞—Ç–∞
            message.contains("–¥–∞—Ç–∞") || message.contains("–∫–∞–∫–æ–µ —á–∏—Å–ª–æ") -> {
                val date = SimpleDateFormat("dd MMMM yyyy", Locale("ru", "RU")).format(Date())
                "–°–µ–≥–æ–¥–Ω—è $date"
            }
            
            // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            message.contains("–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏") -> {
                val days = arrayOf("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞")
                val calendar = Calendar.getInstance()
                val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1
                "–°–µ–≥–æ–¥–Ω—è ${days[dayOfWeek]}"
            }
            
            // –ü–æ–≥–æ–¥–∞
            message.contains("–ø–æ–≥–æ–¥–∞") -> {
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫: '–ü–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞' –∏–ª–∏ '–ù–∞–π–¥–∏ –ø–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ'"
            }
            
            // –ë—É–¥–∏–ª—å–Ω–∏–∫–∏
            message.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") || message.contains("—Ä–∞–∑–±—É–¥–∏") -> {
                handleAlarmCommand(message)
            }
            
            // –¢–∞–π–º–µ—Ä—ã
            message.contains("—Ç–∞–π–º–µ—Ä") || message.contains("–∑–∞—Å–µ–∫–∏") -> {
                handleTimerCommand(message)
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫–∏
            message.contains("–º–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏") || message.contains("–ø–æ–∫–∞–∂–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏") -> {
                showAlarms()
            }
            
            // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            message.contains("–Ω–∞–ø–æ–º–Ω–∏") || message.contains("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ") -> {
                handleReminderCommand(message)
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            message.contains("–º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") || message.contains("–ø–æ–∫–∞–∂–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") -> {
                showReminders()
            }
            
            // –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            message.contains("–æ—á–∏—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") || message.contains("—É–¥–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") -> {
                reminders.clear()
                "‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã"
            }
            
            // –û—Ç–º–µ–Ω–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫
            message.contains("–æ—Ç–º–µ–Ω–∏ –±—É–¥–∏–ª—å–Ω–∏–∫") || message.contains("—É–¥–∞–ª–∏ –±—É–¥–∏–ª—å–Ω–∏–∫") -> {
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
            }
            
            // –ü–æ–º–æ—â—å
            message.contains("–ø–æ–º–æ—â—å") || message.contains("–∫–æ–º–∞–Ω–¥—ã") || message.contains("—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å") -> 
                """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚Ä¢ üí¨ **–û–±—â–µ–Ω–∏–µ:** –ü—Ä–∏–≤–µ—Ç, –ö–∞–∫ –¥–µ–ª–∞, –°–ø–∞—Å–∏–±–æ
‚Ä¢ üß† **–û–±—É—á–µ–Ω–∏–µ:** –ó–∞–ø–æ–º–Ω–∏ —á—Ç–æ..., –ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å, –ó–∞–±—É–¥—å...
‚Ä¢ üìñ **PDF —Ñ–∞–π–ª—ã:** –ó–∞–≥—Ä—É–∑–∏ PDF, –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π PDF, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PDF
‚Ä¢ üïê **–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞:** –í—Ä–µ–º—è, –î–∞—Ç–∞, –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏  
‚Ä¢ üòÇ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:** –†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É
‚Ä¢ üìä **–†–∞—Å—á–µ—Ç—ã:** –ü–æ—Å—á–∏—Ç–∞–π 2+2
‚Ä¢ üîç **–ü–æ–∏—Å–∫:** –ù–∞–π–¥–∏ –∫–æ—à–∫–∏, –ß—Ç–æ —Ç–∞–∫–æ–µ AI
‚Ä¢ üì∞ **–ù–æ–≤–æ—Å—Ç–∏:** –ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ üå§Ô∏è **–ü–æ–≥–æ–¥–∞:** –ü–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞
‚Ä¢ ‚è∞ **–ë—É–¥–∏–ª—å–Ω–∏–∫–∏:** –ü–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30
‚Ä¢ ‚è±Ô∏è **–¢–∞–π–º–µ—Ä—ã:** –ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
‚Ä¢ üìã **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ
‚Ä¢ üîä **–ì–æ–ª–æ—Å:** –í–∫–ª—é—á–∏ –≥–æ–ª–æ—Å –∏–ª–∏ –í—ã–∫–ª—é—á–∏ –≥–æ–ª–æ—Å
‚Ä¢ ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:** –ë—ã—Å—Ç—Ä–µ–µ, –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –í—ã—à–µ, –ù–∏–∂–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!"""
            
            // –®—É—Ç–∫–∏
            message.contains("—à—É—Ç–∫–∞") || message.contains("–∞–Ω–µ–∫–¥–æ—Ç") -> {
                val jokes = listOf(
                    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 —Ä–∞–≤–Ω–æ Dec 25!",
                    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –±–∞–π—Ç –¥—Ä—É–≥–æ–º—É? –Ø —Ç–µ–±—è –Ω–µ –±–∏—Ç, —è —Å —Ç–æ–±–æ–π!",
                    "–ü–æ—á–µ–º—É Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ C sharp!",
                    "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç null, –≤—Å—Ç—Ä–µ—Ç–∏–≤ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞? Null –∑–¥–∞–≤—Å—Ç–≤—É–π!",
                    "–ü–æ—á–µ–º—É Python —Å—Ç–∞–ª —Ç–∞–∫–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∑–º–µ–∏–Ω–æ–µ –æ–±–∞—è–Ω–∏–µ!"
                )
                jokes.random()
            }
            
            // –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            message.contains("–ø–æ—Å—á–∏—Ç–∞–π") || message.contains("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç") || 
            message.contains("+") || message.contains("-") || message.contains("*") || message.contains("/") -> {
                calculateMathExpression(message)
            }
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º
            message.contains("–≥–æ–ª–æ—Å") && message.contains("–≤—ã–∫–ª—é—á–∏") -> {
                isVoiceResponseEnabled = false
                voiceManager.stop()
                "üîá –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã"
            }
            
            message.contains("–≥–æ–ª–æ—Å") && message.contains("–≤–∫–ª—é—á–∏") -> {
                isVoiceResponseEnabled = true
                "üîä –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã"
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
            message.contains("–±—ã—Å—Ç—Ä–µ–µ") || message.contains("—É—Å–∫–æ—Ä") -> {
                voiceManager.setSpeechRate(1.2f)
                "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞"
            }
            
            message.contains("–º–µ–¥–ª–µ–Ω") || message.contains("–∑–∞–º–µ–¥") -> {
                voiceManager.setSpeechRate(0.7f)
                "üê¢ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ —É–º–µ–Ω—å—à–µ–Ω–∞"
            }
            
            message.contains("–≤—ã—à–µ") && message.contains("–≥–æ–ª–æ—Å") -> {
                voiceManager.setPitch(1.4f)
                "üéµ –¢–æ–Ω –≥–æ–ª–æ—Å–∞ –ø–æ–≤—ã—à–µ–Ω"
            }
            
            message.contains("–Ω–∏–∂–µ") && message.contains("–≥–æ–ª–æ—Å") -> {
                voiceManager.setPitch(0.8f)
                "üéµ –¢–æ–Ω –≥–æ–ª–æ—Å–∞ –ø–æ–Ω–∏–∂–µ–Ω"
            }
            
            // –ü—Ä–æ—â–∞–Ω–∏—è
            message.contains("–ø–æ–∫–∞") || message.contains("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è") -> 
                "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å!"
            
            // –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            else -> {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                "ü§î –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. " +
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è! –°–∫–∞–∂–∏—Ç–µ: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ $userMessage - —ç—Ç–æ [–≤–∞—à –æ—Ç–≤–µ—Ç]' " +
                "–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
            }
        }
    }
    
    private fun handleLearningCommand(message: String): String {
        return try {
            // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞ "–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ"
            val pattern = "–∑–∞–ø–æ–º–Ω–∏\\s*,\\s*—á—Ç–æ\\s*(.+)\\s*-\\s*—ç—Ç–æ\\s*(.+)".toRegex(RegexOption.IGNORE_CASE)
            val match = pattern.find(message)
            
            if (match != null) {
                val question = match.groupValues[1].trim()
                val answer = match.groupValues[2].trim()
                
                if (question.isNotEmpty() && answer.isNotEmpty()) {
                    knowledgeManager.learn(question, answer)
                    "‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ '$question' - —ç—Ç–æ '$answer'"
                } else {
                    "‚ùå –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å. –§–æ—Ä–º–∞—Ç: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ'"
                }
            } else {
                "‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –§–æ—Ä–º–∞—Ç: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ'"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: ${e.message}"
        }
    }
    
    private fun handleForgetCommand(message: String): String {
        return try {
            val question = message.replace("–∑–∞–±—É–¥—å", "").trim()
            if (question.isNotEmpty()) {
                knowledgeManager.forget(question)
                "‚úÖ –ó–∞–±—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å—É: '$question'"
            } else {
                "‚ùå –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–∞–±—ã—Ç—å. –§–æ—Ä–º–∞—Ç: '–ó–∞–±—É–¥—å –∫–æ—à–∫–∏'"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${e.message}"
        }
    }
    
    private fun handleAlarmCommand(message: String): String {
        val time = alarmManager.parseTimeFromText(message)
        return if (time != null) {
            val (hours, minutes) = time
            alarmManager.setAlarm(hours, minutes, "–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ AI –ø–æ–º–æ—â–Ω–∏–∫")
        } else {
            "‚ùå –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞. –°–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30' –∏–ª–∏ '–†–∞–∑–±—É–¥–∏ –º–µ–Ω—è –≤ 8 —á–∞—Å–æ–≤'"
        }
    }
    
    private fun handleTimerCommand(message: String): String {
        val duration = alarmManager.parseDurationFromText(message)
        return if (duration != null) {
            alarmManager.setTimer(duration, "–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ AI –ø–æ–º–æ—â–Ω–∏–∫")
        } else {
            "‚ùå –ù–µ –ø–æ–Ω—è–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞. –°–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç' –∏–ª–∏ '–¢–∞–π–º–µ—Ä –Ω–∞ 10 —Å–µ–∫—É–Ω–¥'"
        }
    }
    
    private fun showAlarms(): String {
        val alarms = alarmManager.getAlarms()
        return if (alarms.isNotEmpty()) {
            val alarmsText = alarms.joinToString("\n‚Ä¢ ", "‚úÖ –í–∞—à–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏:\n‚Ä¢ ") { "${it.time} - ${it.message}" }
            alarmsText
        } else {
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤"
        }
    }
    
    private fun handleReminderCommand(message: String): String {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        val reminderText = message
            .replace("–Ω–∞–ø–æ–º–Ω–∏", "")
            .replace("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "")
            .replace("–º–Ω–µ", "")
            .replace("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "")
            .trim()
        
        return if (reminderText.isNotEmpty() && reminderText != message) {
            reminders.add(reminderText)
            "‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: $reminderText"
        } else {
            "‚ùå –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –°–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ'"
        }
    }
    
    private fun showReminders(): String {
        return if (reminders.isNotEmpty()) {
            val remindersText = reminders.joinToString("\n‚Ä¢ ", "‚úÖ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n‚Ä¢ ")
            remindersText
        } else {
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        }
    }
    
    private fun calculateMathExpression(expression: String): String {
        return try {
            val cleanExpr = expression
                .replace("–ø–æ—Å—á–∏—Ç–∞–π", "")
                .replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "")
                .replace(" ", "")
                .replace(",", ".")
            
            when {
                cleanExpr.contains("+") -> {
                    val parts = cleanExpr.split("+")
                    val result = parts[0].toDouble() + parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("-") -> {
                    val parts = cleanExpr.split("-")
                    val result = parts[0].toDouble() - parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("*") -> {
                    val parts = cleanExpr.split("*")
                    val result = parts[0].toDouble() * parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("/") -> {
                    val parts = cleanExpr.split("/")
                    if (parts[1].toDouble() == 0.0) "‚ùå –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
                    else {
                        val result = parts[0].toDouble() / parts[1].toDouble()
                        "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                    }
                }
                else -> "‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2+2, 10-5, 3*4, 15/3)"
        }
    }
    
    private fun startVoiceInput() {
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.RECORD_AUDIO) 
            == PackageManager.PERMISSION_GRANTED) {
            
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
                putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                putExtra(RecognizerIntent.EXTRA_PROMPT, "–ì–æ–≤–æ—Ä–∏—Ç–µ...")
            }
            
            try {
                speechRecognizer.launch(intent)
            } catch (e: Exception) {
                Toast.makeText(this, "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", Toast.LENGTH_SHORT).show()
            }
        } else {
            requestPermissions(arrayOf(android.Manifest.permission.RECORD_AUDIO), 1)
        }
    }
    
    private fun addWelcomeMessage() {
        val welcomeMessage = ChatMessage(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–º–Ω—ã–π AI –ü–æ–º–æ—â–Ω–∏–∫!\n\n" +
            "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É **—á–∏—Ç–∞—Ç—å PDF —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º**! üìñüîÑ\n\n" +
            "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
            "‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n" +
            "‚Ä¢ üß† –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n" +
            "‚Ä¢ üìñ –ß–∏—Ç–∞—Ç—å –∏ —É—á–∏—Ç—å—Å—è –∏–∑ PDF\n" +
            "‚Ä¢ üìä **–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n" +
            "‚Ä¢ üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å\n" +
            "‚Ä¢ üîä –û–∑–≤—É—á–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã\n" +
            "‚Ä¢ üïê –°–æ–æ–±—â–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É\n" +
            "‚Ä¢ üòÇ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏\n" +
            "‚Ä¢ üìä –í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—á–µ—Ç—ã\n" +
            "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n" +
            "‚Ä¢ üì∞ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n" +
            "‚Ä¢ üå§Ô∏è –°–æ–æ–±—â–∞—Ç—å –ø–æ–≥–æ–¥—É\n" +
            "‚Ä¢ ‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫–∏\n" +
            "‚Ä¢ ‚è±Ô∏è –°—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã\n" +
            "‚Ä¢ üìã –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n" +
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PDF:**\n" +
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÅ –§–∞–π–ª'\n" +
            "2. –í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª\n" +
            "3. **–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!**\n\n" +
            "**–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**\n" +
            "‚Ä¢ '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ'\n" +
            "‚Ä¢ '–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å?' (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)\n" +
            "‚Ä¢ '–ó–∞–≥—Ä—É–∑–∏ PDF'\n" +
            "‚Ä¢ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PDF'\n" +
            "‚Ä¢ '–ù–∞–π–¥–∏ –∫–æ—à–∫–∏'",
            true
        )
        chatMessages.add(welcomeMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        scrollToBottom()
    }
    
    private fun clearChat() {
        chatMessages.clear()
        chatAdapter.notifyDataSetChanged()
        waitingForFeedback = false
    }
    
    private fun scrollToBottom() {
        recyclerViewChat.scrollToPosition(chatMessages.size - 1)
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1 && grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω", Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        voiceManager.shutdown()
    }
}

data class ChatMessage(
    val message: String,
    val isAI: Boolean
)
