package com.example.aiassistant

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.speech.RecognizerIntent
import android.os.Handler
import android.os.Looper
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {
    
    private lateinit var recyclerViewChat: RecyclerView
    private lateinit var editTextMessage: EditText
    private lateinit var buttonSend: Button
    private lateinit var buttonVoice: ImageButton
    private lateinit var buttonClear: Button
    private lateinit var progressBar: ProgressBar
    private lateinit var buttonFile: Button
    private lateinit var progressText: TextView
    
    private lateinit var chatAdapter: ChatAdapter
    private val chatMessages = mutableListOf<ChatMessage>()
    private val handler = Handler(Looper.getMainLooper())
    private lateinit var voiceManager: VoiceManager
    private lateinit var alarmManager: AlarmManager
    private lateinit var webSearchManager: WebSearchManager
    private lateinit var knowledgeManager: KnowledgeManager
    private lateinit var pdfManager: AdvancedPDFManager
    private var isVoiceResponseEnabled = true
    
    private val reminders = mutableListOf<String>()
    private var lastUserMessage = ""
    private var lastAIResponse = ""
    private var waitingForFeedback = false
    private var isProcessingPDF = false

    private val speechRecognizer = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        try {
            val results = result.data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
            if (!results.isNullOrEmpty()) {
                val spokenText = results[0]
                editTextMessage.setText(spokenText)
                sendMessage(spokenText)
            }
        } catch (e: Exception) {
            showToast("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")
        }
    }
    
    private val filePicker = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        if (uri != null) {
            handleFileSelection(uri)
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        try {
            voiceManager = VoiceManager(this)
            alarmManager = AlarmManager(this)
            alarmManager.loadAlarms()
            webSearchManager = WebSearchManager()
            knowledgeManager = KnowledgeManager(this)
            pdfManager = AdvancedPDFManager(this, knowledgeManager)
        } catch (e: Exception) {
            showToast("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}")
        }
        
        initViews()
        setupRecyclerView()
        setupClickListeners()
        
        addWelcomeMessage()
    }
    
    private fun initViews() {
        recyclerViewChat = findViewById(R.id.recyclerViewChat)
        editTextMessage = findViewById(R.id.editTextMessage)
        buttonSend = findViewById(R.id.buttonSend)
        buttonVoice = findViewById(R.id.buttonVoice)
        buttonClear = findViewById(R.id.buttonClear)
        progressBar = findViewById(R.id.progressBar)
        buttonFile = findViewById(R.id.buttonFile)
        progressText = findViewById(R.id.progressText)
    }
    
    private fun setupRecyclerView() {
        chatAdapter = ChatAdapter(chatMessages)
        recyclerViewChat.layoutManager = LinearLayoutManager(this)
        recyclerViewChat.adapter = chatAdapter
    }
    
    private fun setupClickListeners() {
        buttonSend.setOnClickListener {
            val message = editTextMessage.text.toString().trim()
            if (message.isNotEmpty()) {
                sendMessage(message)
                editTextMessage.text.clear()
            } else {
                showToast("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            }
        }
        
        buttonVoice.setOnClickListener {
            startVoiceInput()
        }
        
        buttonClear.setOnClickListener {
            clearChat()
            addWelcomeMessage()
        }
        
        buttonFile.setOnClickListener {
            if (!isProcessingPDF) {
                openFilePicker()
            } else {
                showToast("–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            }
        }
    }
    
    private fun openFilePicker() {
        try {
            filePicker.launch("application/pdf")
        } catch (e: Exception) {
            showToast("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞")
        }
    }
    
    private fun handleFileSelection(uri: Uri) {
        isProcessingPDF = true
        buttonFile.isEnabled = false
        showProgress("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF...")
        
        addAIResponse("üìñ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–Ω–∏–≥—É...", false)
        
        CoroutineScope(Dispatchers.IO).launch {
            try {
                pdfManager.learnFromPDF(uri)
                    .onEach { progress ->
                        runOnUiThread {
                            updateProgress(progress)
                        }
                    }
                    .catch { e ->
                        runOnUiThread {
                            hideProgress()
                            buttonFile.isEnabled = true
                            isProcessingPDF = false
                            addAIResponse("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}", false)
                        }
                    }
                    .collect { progress ->
                        runOnUiThread {
                            if (progress.progress == 100) {
                                hideProgress()
                                buttonFile.isEnabled = true
                                isProcessingPDF = false
                                addAIResponse(progress.message, false)
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–Ω–∏–≥–µ
                                addBookHelpMessage()
                            }
                        }
                    }
            } catch (e: Exception) {
                runOnUiThread {
                    hideProgress()
                    buttonFile.isEnabled = true
                    isProcessingPDF = false
                    addAIResponse("‚ùå –û—à–∏–±–∫–∞: ${e.message}", false)
                }
            }
        }
    }
    
    private fun addBookHelpMessage() {
        val helpMessage = """
            üìö **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–Ω–∏–≥–µ!**
            
            –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
            ‚Ä¢ "–û —á–µ–º —ç—Ç–∞ –∫–Ω–∏–≥–∞?"
            ‚Ä¢ "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏?"
            ‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≥–ª–∞–≤–µ 1"
            ‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ [–∫–æ–Ω—Ü–µ–ø—Ü–∏—è]?"
            ‚Ä¢ "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–µ –≥–µ—Ä–æ–∏?"
            ‚Ä¢ "–í —á–µ–º –æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å?"
            ‚Ä¢ "–û–±—ä—è—Å–Ω–∏ [—Ç–µ–º—É]"
            
            –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é!
        """.trimIndent()
        
        addAIResponse(helpMessage, false)
    }
    
    private fun showProgress(message: String) {
        runOnUiThread {
            progressBar.visibility = View.VISIBLE
            progressText.visibility = View.VISIBLE
            progressText.text = message
            progressBar.progress = 0
        }
    }
    
    private fun hideProgress() {
        runOnUiThread {
            progressBar.visibility = View.GONE
            progressText.visibility = View.GONE
        }
    }
    
    private fun updateProgress(progress: AdvancedPDFManager.ProcessingProgress) {
        runOnUiThread {
            progressBar.progress = progress.progress
            progressText.text = "${progress.step}: ${progress.progress}%"
            
            if (progress.progress < 100) {
                if (chatMessages.isNotEmpty() && chatMessages.last().isAI && 
                    chatMessages.last().message.contains("üîÑ")) {
                    chatMessages.removeAt(chatMessages.size - 1)
                    chatAdapter.notifyItemRemoved(chatMessages.size)
                }
                addAIResponse("üîÑ ${progress.step}: ${progress.progress}%\n${progress.message}", false)
            }
        }
    }
    
    private fun sendMessage(message: String) {
        if (waitingForFeedback) {
            handleFeedback(message)
            return
        }
        
        lastUserMessage = message
        val userMessage = ChatMessage(message, false)
        chatMessages.add(userMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        
        showProgress("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –∫–Ω–∏–≥–µ
        if (pdfManager.hasBook() && isBookRelatedQuestion(message)) {
            handler.postDelayed({
                hideProgress()
                val response = pdfManager.askAboutBook(message)
                lastAIResponse = response
                addAIResponse(response, true)
            }, 1500)
        } else if (message.contains("–Ω–∞–π–¥–∏") || message.contains("–ø–æ–∏—Å–∫") || 
                  message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") || message.contains("–∫—Ç–æ —Ç–∞–∫–æ–π") || 
                  message.contains("–Ω–æ–≤–æ—Å—Ç–∏") || message.contains("–ø–æ–≥–æ–¥–∞")) {
            handleSearchQuery(message)
        } else {
            handler.postDelayed({
                hideProgress()
                val response = generateAIResponse(message)
                lastAIResponse = response
                addAIResponse(response, true)
            }, 1000)
        }
        
        scrollToBottom()
    }
    
    private fun isBookRelatedQuestion(question: String): Boolean {
        val bookKeywords = listOf(
            "–∫–Ω–∏–≥–∞", "–≥–ª–∞–≤–∞", "–≥–µ—Ä–æ–π", "–ø–µ—Ä—Å–æ–Ω–∞–∂", "—Å—é–∂–µ—Ç", "–∞–≤—Ç–æ—Ä", 
            "–ø—Ä–æ —á—Ç–æ", "–æ —á–µ–º", "—Ç–µ–º–∞", "–∏–¥–µ—è", "–∫–æ–Ω—Ü–µ–ø—Ü–∏—è", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        )
        
        return bookKeywords.any { question.contains(it, ignoreCase = true) } ||
               pdfManager.getCurrentBookTitle() != "–ö–Ω–∏–≥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    }
    
    private fun handleFeedback(message: String) {
        when (message.lowercase()) {
            "–¥–∞", "üëç" -> {
                knowledgeManager.learn(lastUserMessage, lastAIResponse)
                addAIResponse("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç. üß†", false)
            }
            "–Ω–µ—Ç", "üëé" -> {
                addAIResponse("‚ùå –ü–æ–Ω—è–ª, —É—á—Ç—É –≤ –±—É–¥—É—â–µ–º.", false)
            }
            "–Ω–µ –≤–∞–∂–Ω–æ", "ü§∑" -> {
                addAIResponse("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üòä", false)
            }
            else -> {
                lastUserMessage = message
                val userMessage = ChatMessage(message, false)
                chatMessages.add(userMessage)
                chatAdapter.notifyItemInserted(chatMessages.size - 1)
                
                showProgress("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
                handler.postDelayed({
                    hideProgress()
                    val response = generateAIResponse(message)
                    lastAIResponse = response
                    addAIResponse(response, true)
                }, 1000)
            }
        }
        waitingForFeedback = false
        scrollToBottom()
    }
    
    private fun handleSearchQuery(message: String) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val response = when {
                    message.contains("–ø–æ–≥–æ–¥–∞") -> webSearchManager.getWeather()
                    message.contains("–Ω–æ–≤–æ—Å—Ç–∏") -> webSearchManager.getNews()
                    message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") || message.contains("–∫—Ç–æ —Ç–∞–∫–æ–π") -> 
                        webSearchManager.getQuickAnswer(message)
                    else -> webSearchManager.searchWeb(message)
                }
                
                runOnUiThread {
                    hideProgress()
                    lastAIResponse = response
                    addAIResponse(response, true)
                }
            } catch (e: Exception) {
                runOnUiThread {
                    hideProgress()
                    addAIResponse("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${e.message}", true)
                }
            }
        }
    }
    
    private fun addAIResponse(response: String, showFeedback: Boolean) {
        runOnUiThread {
            val aiMessage = ChatMessage(response, true)
            chatMessages.add(aiMessage)
            chatAdapter.notifyItemInserted(chatMessages.size - 1)
            
            if (showFeedback && !response.contains("‚ùå") && !response.contains("‚ö†Ô∏è") && 
                lastUserMessage.isNotEmpty() && !lastUserMessage.contains("–∑–∞–ø–æ–º–Ω–∏")) {
                addFeedbackButtons()
                waitingForFeedback = true
            }
            
            if (isVoiceResponseEnabled && voiceManager.isReady()) {
                try {
                    val speechText = response
                        .replace(Regex("[^\\w\\s–∞-—è–ê-–Ø.,!?\\-]"), "")
                        .replace("**", "")
                        .trim()
                    if (speechText.length > 5) {
                        voiceManager.speak(speechText)
                    }
                } catch (e: Exception) {
                    // Ignore TTS errors
                }
            }
            
            scrollToBottom()
        }
    }
    
    private fun addFeedbackButtons() {
        runOnUiThread {
            val feedbackMessage = ChatMessage("ü§î –ë—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?\nüëç –î–∞  üëé –ù–µ—Ç  ü§∑ –ù–µ –≤–∞–∂–Ω–æ", true)
            chatMessages.add(feedbackMessage)
            chatAdapter.notifyItemInserted(chatMessages.size - 1)
            scrollToBottom()
        }
    }
    
    private fun generateAIResponse(userMessage: String): String {
        return try {
            val message = userMessage.lowercase()
            
            val learnedAnswer = knowledgeManager.findAnswer(message)
            if (learnedAnswer != null) {
                return "üß† ${learnedAnswer.answer}"
            }
            
            when {
                message.contains("–ø—Ä–∏–≤–µ—Ç") -> "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–Ω–∏–≥!"
                message.contains("–∫–∞–∫ –¥–µ–ª–∞") -> "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
                message.contains("—Å–ø–∞—Å–∏–±–æ") -> "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å."
                message.contains("–∑–∞–ø–æ–º–Ω–∏") && message.contains("—á—Ç–æ") -> handleLearningCommand(userMessage)
                message.contains("—á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å") -> knowledgeManager.getKnowledgeStats()
                message.contains("–∑–∞–±—É–¥—å") -> handleForgetCommand(userMessage)
                message.contains("–≤—Ä–µ–º—è") -> SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
                message.contains("–¥–∞—Ç–∞") -> SimpleDateFormat("dd.MM.yyyy", Locale.getDefault()).format(Date())
                message.contains("—à—É—Ç–∫–∞") -> "–ü–æ—á–µ–º—É –∫–Ω–∏–≥–∏ –±–æ—è—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å –±–∞–≥–∏! üìöüòÑ"
                message.contains("–ø–æ—Å—á–∏—Ç–∞–π") -> calculateMathExpression(message)
                message.contains("–ø–æ–º–æ—â—å") -> getHelpMessage()
                pdfManager.hasBook() && message.contains("–∫–Ω–∏–≥–∞") -> 
                    "–°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–Ω–∏–≥–∞: \"${pdfManager.getCurrentBookTitle()}\". –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é!"
                else -> "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ù–∞—É—á–∏—Ç—å –º–µ–Ω—è: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ $userMessage - —ç—Ç–æ [–æ—Ç–≤–µ—Ç]'\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É –≤ PDF –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–µ–π\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"
        }
    }
    
    private fun getHelpMessage(): String {
        val baseHelp = """
            ü§ñ **–£–º–Ω—ã–π AI –ü–æ–º–æ—â–Ω–∏–∫** - —á—Ç–æ —è —É–º–µ—é:
            
            üìö **–†–∞–±–æ—Ç–∞ —Å –∫–Ω–∏–≥–∞–º–∏:**
            ‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ PDF –∫–Ω–∏–≥–∏ (–∫–Ω–æ–ø–∫–∞ üìÅ)
            ‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
            ‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –≥–ª–∞–≤ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
            
            üß† **–û–±—É—á–µ–Ω–∏–µ:**
            ‚Ä¢ "–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ"
            ‚Ä¢ "–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å?" - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–∞–Ω–∏–π
            ‚Ä¢ "–ó–∞–±—É–¥—å –∫–æ—à–∫–∏" - —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            
            üîç **–ü–æ–∏—Å–∫:**
            ‚Ä¢ "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–∫–∞—Ö"
            ‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
            ‚Ä¢ "–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
            ‚Ä¢ "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ"
            
            ‚è∞ **–£—Ç–∏–ª–∏—Ç—ã:**
            ‚Ä¢ "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?" - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            ‚Ä¢ "–ö–∞–∫–∞—è –¥–∞—Ç–∞?" - —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
            ‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É" - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            ‚Ä¢ "–ü–æ—Å—á–∏—Ç–∞–π 2+2" - –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            
            üé§ **–ì–æ–ª–æ—Å:**
            ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
            ‚Ä¢ –û—Ç–≤–µ—Ç—ã –æ–∑–≤—É—á–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """.trimIndent()
        
        return if (pdfManager.hasBook()) {
            baseHelp + "\n\nüìñ **–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–∏–≥–∞:** \"${pdfManager.getCurrentBookTitle()}\""
        } else {
            baseHelp
        }
    }
    
    private fun handleLearningCommand(message: String): String {
        return try {
            val pattern = "–∑–∞–ø–æ–º–Ω–∏, —á—Ç–æ (.+) - —ç—Ç–æ (.+)".toRegex(RegexOption.IGNORE_CASE)
            val match = pattern.find(message)
            if (match != null) {
                val question = match.groupValues[1].trim()
                val answer = match.groupValues[2].trim()
                if (question.isNotEmpty() && answer.isNotEmpty()) {
                    knowledgeManager.learn(question, answer)
                    "‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '$question' - —ç—Ç–æ '$answer'"
                } else {
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç"
                }
            } else {
                "‚ùå –§–æ—Ä–º–∞—Ç: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ'"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è"
        }
    }
    
    private fun handleForgetCommand(message: String): String {
        return try {
            val question = message.replace("–∑–∞–±—É–¥—å", "").trim()
            if (question.isNotEmpty()) {
                knowledgeManager.forget(question)
                "‚úÖ –ó–∞–±—ã–ª: '$question'"
            } else {
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∑–∞–±—ã—Ç—å"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"
        }
    }
    
    private fun calculateMathExpression(expression: String): String {
        return try {
            val cleanExpr = expression
                .replace("–ø–æ—Å—á–∏—Ç–∞–π", "")
                .replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "")
                .replace(" ", "")
            
            when {
                cleanExpr.contains("+") -> {
                    val parts = cleanExpr.split("+")
                    val result = parts[0].toDouble() + parts[1].toDouble()
                    "‚úÖ $result"
                }
                cleanExpr.contains("-") -> {
                    val parts = cleanExpr.split("-")
                    val result = parts[0].toDouble() - parts[1].toDouble()
                    "‚úÖ $result"
                }
                cleanExpr.contains("*") -> {
                    val parts = cleanExpr.split("*")
                    val result = parts[0].toDouble() * parts[1].toDouble()
                    "‚úÖ $result"
                }
                cleanExpr.contains("/") -> {
                    val parts = cleanExpr.split("/")
                    if (parts[1].toDouble() == 0.0) "‚ùå –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
                    else {
                        val result = parts[0].toDouble() / parts[1].toDouble()
                        "‚úÖ $result"
                    }
                }
                else -> "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
        }
    }
    
    private fun startVoiceInput() {
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.RECORD_AUDIO) 
            == PackageManager.PERMISSION_GRANTED) {
            
            try {
                val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                    putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
                    putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                    putExtra(RecognizerIntent.EXTRA_PROMPT, "–ì–æ–≤–æ—Ä–∏—Ç–µ...")
                }
                speechRecognizer.launch(intent)
            } catch (e: Exception) {
                showToast("–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            }
        } else {
            requestPermissions(arrayOf(android.Manifest.permission.RECORD_AUDIO), 1)
        }
    }
    
    private fun addWelcomeMessage() {
        val welcomeMessage = ChatMessage(
            """
            üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–º–Ω—ã–π AI –ü–æ–º–æ—â–Ω–∏–∫!**
            
            üìö **–¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é –∫–Ω–∏–≥–∏!** –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
            ‚Ä¢ "–û —á–µ–º —ç—Ç–∞ –∫–Ω–∏–≥–∞?"
            ‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –≥–ª–∞–≤—É 1" 
            ‚Ä¢ "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–µ –≥–µ—Ä–æ–∏?"
            ‚Ä¢ "–í —á–µ–º –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è?"
            ‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ [–ª—é–±–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è]?"
            
            üß† **–¢–∞–∫–∂–µ —è —É–º–µ—é:**
            ‚Ä¢ –°–∞–º–æ–æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
            ‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            ‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –±—É–¥–∏–ª—å–Ω–∏–∫–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            ‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            
            –ù–∞–∂–º–∏—Ç–µ üìÅ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!
            """.trimIndent(), true
        )
        chatMessages.add(welcomeMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        scrollToBottom()
    }
    
    private fun clearChat() {
        chatMessages.clear()
        chatAdapter.notifyDataSetChanged()
        waitingForFeedback = false
    }
    
    private fun scrollToBottom() {
        recyclerViewChat.scrollToPosition(chatMessages.size - 1)
    }
    
    private fun showToast(message: String) {
        runOnUiThread {
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1 && grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            showToast("–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω")
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        try {
            voiceManager.shutdown()
        } catch (e: Exception) {
            // Ignore
        }
    }
}

data class ChatMessage(
    val message: String,
    val isAI: Boolean
)
