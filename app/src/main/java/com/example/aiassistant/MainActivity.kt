package com.example.aiassistant

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.speech.RecognizerIntent
import android.os.Handler
import android.os.Looper
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {
    
    private lateinit var recyclerViewChat: RecyclerView
    private lateinit var editTextMessage: EditText
    private lateinit var buttonSend: Button
    private lateinit var buttonVoice: ImageButton
    private lateinit var buttonClear: Button
    private lateinit var progressBar: ProgressBar
    private lateinit var buttonFile: Button
    private lateinit var progressText: TextView
    
    private lateinit var chatAdapter: ChatAdapter
    private val chatMessages = mutableListOf<ChatMessage>()
    private val handler = Handler(Looper.getMainLooper())
    private lateinit var voiceManager: VoiceManager
    private lateinit var alarmManager: AlarmManager
    private lateinit var webSearchManager: WebSearchManager
    private lateinit var knowledgeManager: KnowledgeManager
    private lateinit var pdfManager: PDFManager
    private var isVoiceResponseEnabled = true
    
    private val reminders = mutableListOf<String>()
    private var lastUserMessage = ""
    private var lastAIResponse = ""
    private var waitingForFeedback = false
    private var isProcessingPDF = false

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    private val speechRecognizer = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        try {
            val results = result.data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
            if (!results.isNullOrEmpty()) {
                val spokenText = results[0]
                editTextMessage.setText(spokenText)
                sendMessage(spokenText)
            }
        } catch (e: Exception) {
            Toast.makeText(this, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", Toast.LENGTH_SHORT).show()
        }
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    private val filePicker = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        if (uri != null) {
            handleFileSelection(uri)
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ—Å–ª–µ setContentView
        voiceManager = VoiceManager(this)
        alarmManager = AlarmManager(this)
        alarmManager.loadAlarms()
        webSearchManager = WebSearchManager()
        knowledgeManager = KnowledgeManager(this)
        pdfManager = PDFManager(this, knowledgeManager)
        
        initViews()
        setupRecyclerView()
        setupClickListeners()
        
        addWelcomeMessage()
    }
    
    private fun initViews() {
        recyclerViewChat = findViewById(R.id.recyclerViewChat)
        editTextMessage = findViewById(R.id.editTextMessage)
        buttonSend = findViewById(R.id.buttonSend)
        buttonVoice = findViewById(R.id.buttonVoice)
        buttonClear = findViewById(R.id.buttonClear)
        progressBar = findViewById(R.id.progressBar)
        buttonFile = findViewById(R.id.buttonFile)
        progressText = findViewById(R.id.progressText)
    }
    
    private fun setupRecyclerView() {
        chatAdapter = ChatAdapter(chatMessages)
        recyclerViewChat.layoutManager = LinearLayoutManager(this)
        recyclerViewChat.adapter = chatAdapter
    }
    
    private fun setupClickListeners() {
        buttonSend.setOnClickListener {
            val message = editTextMessage.text.toString().trim()
            if (message.isNotEmpty()) {
                sendMessage(message)
                editTextMessage.text.clear()
            } else {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", Toast.LENGTH_SHORT).show()
            }
        }
        
        buttonVoice.setOnClickListener {
            startVoiceInput()
        }
        
        buttonClear.setOnClickListener {
            clearChat()
            addWelcomeMessage()
        }
        
        buttonFile.setOnClickListener {
            if (!isProcessingPDF) {
                openFilePicker()
            } else {
                Toast.makeText(this, "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    private fun openFilePicker() {
        filePicker.launch("application/pdf")
    }
    
    private fun handleFileSelection(uri: Uri) {
        isProcessingPDF = true
        buttonFile.isEnabled = false
        showProgress("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF...")
        
        addAIResponse("üìñ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É PDF —Ñ–∞–π–ª–∞...", false)
        
        CoroutineScope(Dispatchers.IO).launch {
            try {
                pdfManager.learnFromPDF(uri)
                    .onEach { progress ->
                        runOnUiThread {
                            updateProgress(progress)
                        }
                    }
                    .collect { progress ->
                        if (progress.progress == 100) {
                            runOnUiThread {
                                hideProgress()
                                buttonFile.isEnabled = true
                                isProcessingPDF = false
                                addAIResponse(progress.message, false)
                            }
                        }
                    }
            } catch (e: Exception) {
                runOnUiThread {
                    hideProgress()
                    buttonFile.isEnabled = true
                    isProcessingPDF = false
                    addAIResponse("‚ùå –û—à–∏–±–∫–∞: ${e.message}", false)
                }
            }
        }
    }
    
    private fun showProgress(message: String) {
        progressBar.visibility = View.VISIBLE
        progressText.visibility = View.VISIBLE
        progressText.text = message
    }
    
    private fun hideProgress() {
        progressBar.visibility = View.GONE
        progressText.visibility = View.GONE
    }
    
    private fun updateProgress(progress: PDFManager.ProcessingProgress) {
        progressBar.progress = progress.progress
        progressText.text = "${progress.step}: ${progress.progress}% - ${progress.message}"
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if (progress.progress < 100) {
            if (chatMessages.isNotEmpty() && chatMessages.last().isAI) {
                chatMessages.removeAt(chatMessages.size - 1)
            }
            addAIResponse("üîÑ ${progress.step}: ${progress.progress}%\n${progress.message}", false)
        }
    }
    
    private fun sendMessage(message: String) {
        if (waitingForFeedback) {
            handleFeedback(message)
            return
        }
        
        lastUserMessage = message
        val userMessage = ChatMessage(message, false)
        chatMessages.add(userMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        
        showProgress("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        if (message.contains("–Ω–∞–π–¥–∏") || message.contains("–ø–æ–∏—Å–∫") || message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") || 
            message.contains("–∫—Ç–æ —Ç–∞–∫–æ–π") || message.contains("–Ω–æ–≤–æ—Å—Ç–∏") || message.contains("–ø–æ–≥–æ–¥–∞")) {
            handleSearchQuery(message)
        } else {
            handler.postDelayed({
                hideProgress()
                val response = generateAIResponse(message)
                lastAIResponse = response
                addAIResponse(response, true)
            }, 1000)
        }
        
        scrollToBottom()
    }
    
    private fun handleFeedback(message: String) {
        when (message.lowercase()) {
            "–¥–∞", "üëç" -> {
                knowledgeManager.learn(lastUserMessage, lastAIResponse)
                addAIResponse("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–ø–æ–º–Ω–∏–ª –æ—Ç–≤–µ—Ç. üß†", false)
            }
            "–Ω–µ—Ç", "üëé" -> {
                knowledgeManager.improveAnswer(lastUserMessage, false)
                addAIResponse("‚ùå –ü–æ–Ω—è–ª, —É—á—Ç—É –≤ –±—É–¥—É—â–µ–º.", false)
            }
            "–Ω–µ –≤–∞–∂–Ω–æ", "ü§∑" -> {
                addAIResponse("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üòä", false)
            }
            else -> {
                lastUserMessage = message
                val userMessage = ChatMessage(message, false)
                chatMessages.add(userMessage)
                chatAdapter.notifyItemInserted(chatMessages.size - 1)
                
                showProgress("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                handler.postDelayed({
                    hideProgress()
                    val response = generateAIResponse(message)
                    lastAIResponse = response
                    addAIResponse(response, true)
                }, 1000)
            }
        }
        waitingForFeedback = false
        scrollToBottom()
    }
    
    private fun handleSearchQuery(message: String) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val response = when {
                    message.contains("–ø–æ–≥–æ–¥–∞") -> {
                        val city = extractSearchQuery(message, "–ø–æ–≥–æ–¥–∞")
                        if (city.isNotEmpty() && city != message) {
                            webSearchManager.getWeather(city)
                        } else {
                            webSearchManager.getWeather()
                        }
                    }
                    message.contains("–Ω–æ–≤–æ—Å—Ç–∏") -> {
                        val topic = extractSearchQuery(message, "–Ω–æ–≤–æ—Å—Ç–∏")
                        webSearchManager.getNews(topic)
                    }
                    message.contains("—á—Ç–æ —Ç–∞–∫–æ–µ") || message.contains("–∫—Ç–æ —Ç–∞–∫–æ–π") -> {
                        val query = extractSearchQuery(message, listOf("—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫—Ç–æ —Ç–∞–∫–æ–π"))
                        webSearchManager.getQuickAnswer(query)
                    }
                    else -> {
                        val query = extractSearchQuery(message, listOf("–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–Ω–∞–π—Ç–∏"))
                        webSearchManager.searchWeb(query)
                    }
                }
                
                runOnUiThread {
                    hideProgress()
                    lastAIResponse = response
                    addAIResponse(response, true)
                }
            } catch (e: Exception) {
                runOnUiThread {
                    hideProgress()
                    lastAIResponse = "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
                    addAIResponse(lastAIResponse, true)
                }
            }
        }
    }
    
    private fun extractSearchQuery(message: String, keywords: Any): String {
        return when (keywords) {
            is String -> message.replace(keywords, "").trim()
            is List<*> -> {
                var result = message
                (keywords as List<String>).forEach { keyword ->
                    result = result.replace(keyword, "")
                }
                result.trim()
            }
            else -> message
        }
    }
    
    private fun addAIResponse(response: String, showFeedback: Boolean) {
        val aiMessage = ChatMessage(response, true)
        chatMessages.add(aiMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        
        if (showFeedback && !response.contains("‚ùå") && !response.contains("‚ö†Ô∏è") && 
            lastUserMessage.isNotEmpty() && !lastUserMessage.contains("–∑–∞–ø–æ–º–Ω–∏")) {
            addFeedbackButtons()
            waitingForFeedback = true
        }
        
        if (isVoiceResponseEnabled && voiceManager.isReady()) {
            val speechText = response.replace(Regex("[üéØüïêüìÖüìÜ‚è∞üí¨üéµüìç‚öôÔ∏èüîä‚òÄÔ∏èüéÆüìöüí∞üè•üç≥üòÇü§£üòÑüòäü§≠üëãü§îüéâüé§üå§Ô∏è‚ÑπÔ∏è‚úÖ‚ùåüîç‚è∞‚è±Ô∏èüîîüìãüì∞üîçüéØ‚ö†Ô∏è‚ùå‚ÑπÔ∏èüåßÔ∏è‚ùÑÔ∏èüå•Ô∏èüå§Ô∏èü§îüëçüëéü§∑üìäüß†üìñüìöüîçüîÑüìä]"), "")
                .replace(Regex("\\*\\*(.*?)\\*\\*"), "$1")
                .trim()
            voiceManager.speak(speechText)
        }
        
        scrollToBottom()
    }
    
    private fun addFeedbackButtons() {
        val feedbackMessage = ChatMessage(
            "ü§î –ë—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?\nüëç –î–∞  |  üëé –ù–µ—Ç  |  ü§∑ –ù–µ –≤–∞–∂–Ω–æ",
            true
        )
        chatMessages.add(feedbackMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        scrollToBottom()
    }
    
    private fun generateAIResponse(userMessage: String): String {
        val message = userMessage.lowercase()
        
        val learnedAnswer = knowledgeManager.findAnswer(message)
        if (learnedAnswer != null) {
            return "üß† " + learnedAnswer.answer + "\n\n*[–ò–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π]*"
        }
        
        return when {
            message.contains("–ø—Ä–∏–≤–µ—Ç") || message.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") -> 
                "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
            message.contains("–∫–∞–∫ –¥–µ–ª–∞") || message.contains("–∫–∞–∫ —Ç—ã") -> 
                "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å?"
            
            message.contains("—Å–ø–∞—Å–∏–±–æ") || message.contains("–±–ª–∞–≥–æ–¥–∞—Ä—é") -> 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
            
            message.contains("–∑–∞–ø–æ–º–Ω–∏") && message.contains("—á—Ç–æ") -> {
                handleLearningCommand(userMessage)
            }
            
            message.contains("—á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å") -> {
                knowledgeManager.getKnowledgeStats()
            }
            
            message.contains("–∑–∞–±—É–¥—å") -> {
                handleForgetCommand(userMessage)
            }
            
            message.contains("–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π pdf") -> {
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÅ –§–∞–π–ª' –¥–ª—è –≤—ã–±–æ—Ä–∞ PDF"
            }
            
            message.contains("–≤—Ä–µ–º—è") || message.contains("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") -> {
                val time = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
                "–°–µ–π—á–∞—Å $time"
            }
            
            message.contains("–¥–∞—Ç–∞") || message.contains("–∫–∞–∫–æ–µ —á–∏—Å–ª–æ") -> {
                val date = SimpleDateFormat("dd MMMM yyyy", Locale("ru", "RU")).format(Date())
                "–°–µ–≥–æ–¥–Ω—è $date"
            }
            
            message.contains("–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏") -> {
                val days = arrayOf("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞")
                val calendar = Calendar.getInstance()
                val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1
                "–°–µ–≥–æ–¥–Ω—è ${days[dayOfWeek]}"
            }
            
            message.contains("–ø–æ–≥–æ–¥–∞") -> {
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–ü–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞'"
            }
            
            message.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") || message.contains("—Ä–∞–∑–±—É–¥–∏") -> {
                handleAlarmCommand(message)
            }
            
            message.contains("—Ç–∞–π–º–µ—Ä") || message.contains("–∑–∞—Å–µ–∫–∏") -> {
                handleTimerCommand(message)
            }
            
            message.contains("–º–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏") -> {
                showAlarms()
            }
            
            message.contains("–Ω–∞–ø–æ–º–Ω–∏") -> {
                handleReminderCommand(message)
            }
            
            message.contains("–º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") -> {
                showReminders()
            }
            
            message.contains("–æ—á–∏—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") -> {
                reminders.clear()
                "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã"
            }
            
            message.contains("–ø–æ–º–æ—â—å") || message.contains("–∫–æ–º–∞–Ω–¥—ã") -> 
                """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç, –ö–∞–∫ –¥–µ–ª–∞
‚Ä¢ üß† –û–±—É—á–µ–Ω–∏–µ: –ó–∞–ø–æ–º–Ω–∏ —á—Ç–æ...
‚Ä¢ üìñ PDF: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìÅ
‚Ä¢ üïê –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
‚Ä¢ üòÇ –®—É—Ç–∫–∏
‚Ä¢ üìä –†–∞—Å—á–µ—Ç—ã
‚Ä¢ üîç –ü–æ–∏—Å–∫
‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏
‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞
‚Ä¢ ‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫–∏
‚Ä¢ ‚è±Ô∏è –¢–∞–π–º–µ—Ä—ã
‚Ä¢ üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
            
            message.contains("—à—É—Ç–∫–∞") || message.contains("–∞–Ω–µ–∫–¥–æ—Ç") -> {
                val jokes = listOf(
                    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? Oct 31 == Dec 25!",
                    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –±–∞–π—Ç –¥—Ä—É–≥–æ–º—É? –Ø —Ç–µ–±—è –Ω–µ –±–∏—Ç!",
                    "–ü–æ—á–µ–º—É Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ C#!"
                )
                jokes.random()
            }
            
            message.contains("–ø–æ—Å—á–∏—Ç–∞–π") || message.contains("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç") -> {
                calculateMathExpression(message)
            }
            
            message.contains("–≥–æ–ª–æ—Å") && message.contains("–≤—ã–∫–ª—é—á–∏") -> {
                isVoiceResponseEnabled = false
                voiceManager.stop()
                "üîá –ì–æ–ª–æ—Å –≤—ã–∫–ª—é—á–µ–Ω"
            }
            
            message.contains("–≥–æ–ª–æ—Å") && message.contains("–≤–∫–ª—é—á–∏") -> {
                isVoiceResponseEnabled = true
                "üîä –ì–æ–ª–æ—Å –≤–∫–ª—é—á–µ–Ω"
            }
            
            message.contains("–ø–æ–∫–∞") || message.contains("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è") -> 
                "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            
            else -> {
                "ü§î –ù–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç. –ù–∞—É—á–∏—Ç–µ: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ $userMessage - —ç—Ç–æ [–æ—Ç–≤–µ—Ç]'"
            }
        }
    }
    
    private fun handleLearningCommand(message: String): String {
        return try {
            val pattern = "–∑–∞–ø–æ–º–Ω–∏\\s*,\\s*—á—Ç–æ\\s*(.+)\\s*-\\s*—ç—Ç–æ\\s*(.+)".toRegex(RegexOption.IGNORE_CASE)
            val match = pattern.find(message)
            
            if (match != null) {
                val question = match.groupValues[1].trim()
                val answer = match.groupValues[2].trim()
                
                if (question.isNotEmpty() && answer.isNotEmpty()) {
                    knowledgeManager.learn(question, answer)
                    "‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: '$question' - —ç—Ç–æ '$answer'"
                } else {
                    "‚ùå –§–æ—Ä–º–∞—Ç: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ'"
                }
            } else {
                "‚ùå –§–æ—Ä–º–∞—Ç: '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∫–æ—à–∫–∏ - —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ'"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
        }
    }
    
    private fun handleForgetCommand(message: String): String {
        return try {
            val question = message.replace("–∑–∞–±—É–¥—å", "").trim()
            if (question.isNotEmpty()) {
                knowledgeManager.forget(question)
                "‚úÖ –ó–∞–±—ã–ª: '$question'"
            } else {
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∑–∞–±—ã—Ç—å"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
        }
    }
    
    private fun handleAlarmCommand(message: String): String {
        val time = alarmManager.parseTimeFromText(message)
        return if (time != null) {
            val (hours, minutes) = time
            alarmManager.setAlarm(hours, minutes, "–ë—É–¥–∏–ª—å–Ω–∏–∫")
        } else {
            "‚ùå –°–∫–∞–∂–∏—Ç–µ: '–ü–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30'"
        }
    }
    
    private fun handleTimerCommand(message: String): String {
        val duration = alarmManager.parseDurationFromText(message)
        return if (duration != null) {
            alarmManager.setTimer(duration, "–¢–∞–π–º–µ—Ä")
        } else {
            "‚ùå –°–∫–∞–∂–∏—Ç–µ: '–¢–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç'"
        }
    }
    
    private fun showAlarms(): String {
        val alarms = alarmManager.getAlarms()
        return if (alarms.isNotEmpty()) {
            alarms.joinToString("\n‚Ä¢ ", "‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫–∏:\n‚Ä¢ ") { "${it.time} - ${it.message}" }
        } else {
            "‚ÑπÔ∏è –ù–µ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤"
        }
    }
    
    private fun handleReminderCommand(message: String): String {
        val reminderText = message.replace("–Ω–∞–ø–æ–º–Ω–∏", "").trim()
        return if (reminderText.isNotEmpty() && reminderText != message) {
            reminders.add(reminderText)
            "‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: $reminderText"
        } else {
            "‚ùå –°–∫–∞–∂–∏—Ç–µ: '–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ'"
        }
    }
    
    private fun showReminders(): String {
        return if (reminders.isNotEmpty()) {
            reminders.joinToString("\n‚Ä¢ ", "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n‚Ä¢ ")
        } else {
            "‚ÑπÔ∏è –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        }
    }
    
    private fun calculateMathExpression(expression: String): String {
        return try {
            val cleanExpr = expression.replace("–ø–æ—Å—á–∏—Ç–∞–π", "").replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "").replace(" ", "")
            
            when {
                cleanExpr.contains("+") -> {
                    val parts = cleanExpr.split("+")
                    val result = parts[0].toDouble() + parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("-") -> {
                    val parts = cleanExpr.split("-")
                    val result = parts[0].toDouble() - parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("*") -> {
                    val parts = cleanExpr.split("*")
                    val result = parts[0].toDouble() * parts[1].toDouble()
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                }
                cleanExpr.contains("/") -> {
                    val parts = cleanExpr.split("/")
                    if (parts[1].toDouble() == 0.0) "‚ùå –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
                    else {
                        val result = parts[0].toDouble() / parts[1].toDouble()
                        "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: $result"
                    }
                }
                else -> "‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
        }
    }
    
    private fun startVoiceInput() {
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.RECORD_AUDIO) 
            == PackageManager.PERMISSION_GRANTED) {
            
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
                putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
                putExtra(RecognizerIntent.EXTRA_PROMPT, "–ì–æ–≤–æ—Ä–∏—Ç–µ...")
            }
            
            try {
                speechRecognizer.launch(intent)
            } catch (e: Exception) {
                Toast.makeText(this, "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", Toast.LENGTH_SHORT).show()
            }
        } else {
            requestPermissions(arrayOf(android.Manifest.permission.RECORD_AUDIO), 1)
        }
    }
    
    private fun addWelcomeMessage() {
        val welcomeMessage = ChatMessage(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" +
            "–Ø –º–æ–≥—É:\n" +
            "‚Ä¢ üìñ –ß–∏—Ç–∞—Ç—å PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n" +
            "‚Ä¢ üß† –°–∞–º–æ–æ–±—É—á–∞—Ç—å—Å—è\n" +
            "‚Ä¢ üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å\n" +
            "‚Ä¢ üîä –û–∑–≤—É—á–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã\n" +
            "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n" +
            "–ù–∞–∂–º–∏—Ç–µ üìÅ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF!",
            true
        )
        chatMessages.add(welcomeMessage)
        chatAdapter.notifyItemInserted(chatMessages.size - 1)
        scrollToBottom()
    }
    
    private fun clearChat() {
        chatMessages.clear()
        chatAdapter.notifyDataSetChanged()
        waitingForFeedback = false
    }
    
    private fun scrollToBottom() {
        recyclerViewChat.scrollToPosition(chatMessages.size - 1)
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1 && grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω", Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        voiceManager.shutdown()
    }
}

data class ChatMessage(
    val message: String,
    val isAI: Boolean
)
