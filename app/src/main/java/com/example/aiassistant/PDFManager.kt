package com.example.aiassistant

import android.content.ContentResolver
import android.content.Context
import android.net.Uri
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.InputStream

class PDFManager(private val context: Context, private val knowledgeManager: KnowledgeManager) {
    
    suspend fun learnFromPDF(pdfUri: Uri): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val contentResolver: ContentResolver = context.contentResolver
            val inputStream: InputStream? = contentResolver.openInputStream(pdfUri)
            
            if (inputStream != null) {
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF
                val text = readTextFromStream(inputStream)
                inputStream.close()
                
                if (text.isNotEmpty()) {
                    processAndLearnText(text)
                    "‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ –∑–Ω–∞–Ω–∏—è –∏–∑ PDF! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${text.length} —Å–∏–º–≤–æ–ª–æ–≤."
                } else {
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."
                }
            } else {
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª."
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: ${e.message}"
        }
    }
    
    private fun readTextFromStream(inputStream: InputStream): String {
        return try {
            inputStream.bufferedReader().use { it.readText() }
        } catch (e: Exception) {
            ""
        }
    }
    
    private fun processAndLearnText(text: String) {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        val sentences = text.split('.', '!', '?', '\n')
            .map { it.trim() }
            .filter { it.length > 20 && it.length < 500 } // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ
        
        var learnedCount = 0
        
        sentences.forEach { sentence ->
            if (sentence.isNotEmpty()) {
                // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –ø–∞—Ä—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                val words = sentence.split(' ').filter { it.length > 3 }
                if (words.size >= 3) {
                    // –ë–µ—Ä–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                    val keyWords = words.take(3).joinToString(" ")
                    knowledgeManager.learn(keyWords, sentence)
                    learnedCount++
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Ñ–∞–∫—Ç–æ–≤
                    if (learnedCount >= 50) return@forEach
                }
            }
        }
    }
    
    suspend fun extractKeyFactsFromPDF(pdfUri: Uri): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val contentResolver: ContentResolver = context.contentResolver
            val inputStream: InputStream? = contentResolver.openInputStream(pdfUri)
            
            if (inputStream != null) {
                val text = readTextFromStream(inputStream)
                inputStream.close()
                
                if (text.isNotEmpty()) {
                    val facts = extractImportantFacts(text)
                    if (facts.isNotEmpty()) {
                        "üìö **–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ PDF:**\n\n" + facts.joinToString("\n\n")
                    } else {
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ PDF."
                    }
                } else {
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å PDF —Ñ–∞–π–ª."
                }
            } else {
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª."
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PDF: ${e.message}"
        }
    }
    
    private fun extractImportantFacts(text: String): List<String> {
        val sentences = text.split('.', '!', '?')
            .map { it.trim() }
            .filter { it.length > 30 && it.length < 200 }
        
        // –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        val keyWords = listOf("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "—ç—Ç–æ", "–∑–Ω–∞—á–∏—Ç", "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º", 
                             "–≤–∞–∂–Ω–æ", "–∫–ª—é—á–µ–≤–æ–π", "–æ—Å–Ω–æ–≤–Ω–æ–π", "–≥–ª–∞–≤–Ω—ã–π")
        
        return sentences
            .filter { sentence ->
                keyWords.any { keyword -> 
                    sentence.contains(keyword, ignoreCase = true) 
                } || sentence.split(' ').size in 8..20 // –ò–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã
            }
            .take(10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ–≤
    }
}
