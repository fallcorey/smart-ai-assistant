package com.example.aiassistant

import android.content.ContentResolver
import android.content.Context
import android.net.Uri
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import java.io.InputStream

class PDFManager(private val context: Context, private val knowledgeManager: KnowledgeManager) {
    
    data class ProcessingProgress(
        val step: String,
        val progress: Int,
        val message: String
    )
    
    fun learnFromPDF(pdfUri: Uri): Flow<ProcessingProgress> = flow {
        emit(ProcessingProgress("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏", 0, "–û—Ç–∫—Ä—ã–≤–∞—é PDF —Ñ–∞–π–ª..."))
        
        try {
            val contentResolver: ContentResolver = context.contentResolver
            
            // –í—Å–µ IO –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ withContext
            val inputStream = withContext(Dispatchers.IO) {
                contentResolver.openInputStream(pdfUri)
            }
            
            if (inputStream != null) {
                emit(ProcessingProgress("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", 20, "–ß–∏—Ç–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF..."))
                
                val text = withContext(Dispatchers.IO) {
                    try {
                        inputStream.bufferedReader().use { it.readText() }
                    } catch (e: Exception) {
                        ""
                    } finally {
                        inputStream.close()
                    }
                }
                
                if (text.isNotEmpty()) {
                    emit(ProcessingProgress("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", 40, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)..."))
                    
                    val totalSentences = text.split('.', '!', '?', '\n').size
                    emit(ProcessingProgress("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π", 60, "–ù–∞–π–¥–µ–Ω–æ $totalSentences –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π..."))
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑—É—á–∞–µ–º —Ñ–∞–∫—Ç—ã
                    val learnedCount = processAndLearnText(text) { current, total ->
                        val progress = 60 + (current * 30 / total)
                        emit(ProcessingProgress(
                            "–û–±—É—á–µ–Ω–∏–µ", 
                            progress, 
                            "–ò–∑—É—á–∞—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ $current –∏–∑ $total..."
                        ))
                    }
                    
                    emit(ProcessingProgress("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 100, "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω PDF! –ò–∑—É—á–µ–Ω–æ $learnedCount —Ñ–∞–∫—Ç–æ–≤."))
                } else {
                    emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."))
                }
            } else {
                emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª."))
            }
        } catch (e: Exception) {
            emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: ${e.message}"))
        }
    }
    
    private fun processAndLearnText(text: String, onProgress: ((Int, Int) -> Unit)? = null): Int {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        val sentences = text.split('.', '!', '?', '\n')
            .map { it.trim() }
            .filter { it.length > 20 && it.length < 500 }
        
        var learnedCount = 0
        val totalToProcess = sentences.size.coerceAtMost(50)
        
        sentences.forEachIndexed { index, sentence ->
            if (learnedCount < 50 && sentence.isNotEmpty()) {
                val words = sentence.split(' ').filter { it.length > 3 }
                if (words.size >= 3) {
                    val keyWords = words.take(3).joinToString(" ")
                    knowledgeManager.learn(keyWords, sentence)
                    learnedCount++
                    
                    onProgress?.invoke(index + 1, totalToProcess)
                }
            }
        }
        
        return learnedCount
    }
    
    fun extractKeyFactsFromPDF(pdfUri: Uri): Flow<ProcessingProgress> = flow {
        emit(ProcessingProgress("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞", 0, "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ PDF —Ñ–∞–π–ª–∞..."))
        
        try {
            val contentResolver: ContentResolver = context.contentResolver
            
            val inputStream = withContext(Dispatchers.IO) {
                contentResolver.openInputStream(pdfUri)
            }
            
            if (inputStream != null) {
                emit(ProcessingProgress("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", 30, "–ß–∏—Ç–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF..."))
                
                val text = withContext(Dispatchers.IO) {
                    try {
                        inputStream.bufferedReader().use { it.readText() }
                    } catch (e: Exception) {
                        ""
                    } finally {
                        inputStream.close()
                    }
                }
                
                if (text.isNotEmpty()) {
                    emit(ProcessingProgress("–ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤", 60, "–ò—â—É –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ..."))
                    
                    val facts = extractImportantFacts(text)
                    if (facts.isNotEmpty()) {
                        emit(ProcessingProgress("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 90, "–§–æ—Ä–º–∞—Ç–∏—Ä—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã..."))
                        
                        val result = "üìö **–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ PDF:**\n\n" + 
                                   facts.take(10).joinToString("\n\n") +
                                   "\n\n*–ù–∞–π–¥–µ–Ω–æ ${facts.size} –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤*"
                        
                        emit(ProcessingProgress("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 100, result))
                    } else {
                        emit(ProcessingProgress("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ PDF."))
                    }
                } else {
                    emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å PDF —Ñ–∞–π–ª."))
                }
            } else {
                emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª."))
            }
        } catch (e: Exception) {
            emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PDF: ${e.message}"))
        }
    }
    
    private fun extractImportantFacts(text: String): List<String> {
        val sentences = text.split('.', '!', '?')
            .map { it.trim() }
            .filter { it.length > 30 && it.length < 200 }
        
        val keyWords = listOf("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "—ç—Ç–æ", "–∑–Ω–∞—á–∏—Ç", "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º", 
                             "–≤–∞–∂–Ω–æ", "–∫–ª—é—á–µ–≤–æ–π", "–æ—Å–Ω–æ–≤–Ω–æ–π", "–≥–ª–∞–≤–Ω—ã–π", "–≤—ã–≤–æ–¥", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
        return sentences
            .filter { sentence ->
                keyWords.any { keyword -> 
                    sentence.contains(keyword, ignoreCase = true) 
                } || sentence.split(' ').size in 8..20
            }
            .take(15)
    }
    
    fun getPDFStats(pdfUri: Uri): Flow<ProcessingProgress> = flow {
        emit(ProcessingProgress("–ê–Ω–∞–ª–∏–∑", 0, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É PDF..."))
        
        try {
            val contentResolver: ContentResolver = context.contentResolver
            
            val inputStream = withContext(Dispatchers.IO) {
                contentResolver.openInputStream(pdfUri)
            }
            
            if (inputStream != null) {
                emit(ProcessingProgress("–ß—Ç–µ–Ω–∏–µ", 50, "–ß–∏—Ç–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ..."))
                
                val text = withContext(Dispatchers.IO) {
                    try {
                        inputStream.bufferedReader().use { it.readText() }
                    } catch (e: Exception) {
                        ""
                    } finally {
                        inputStream.close()
                    }
                }
                
                if (text.isNotEmpty()) {
                    val charCount = text.length
                    val wordCount = text.split(Regex("\\s+")).size
                    val sentenceCount = text.split('.', '!', '?').size
                    val paragraphCount = text.split("\n\n").size
                    
                    val stats = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PDF:**\n\n" +
                               "‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: $charCount\n" +
                               "‚Ä¢ –°–ª–æ–≤: $wordCount\n" +
                               "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: $sentenceCount\n" +
                               "‚Ä¢ –ê–±–∑–∞—Ü–µ–≤: $paragraphCount\n" +
                               "‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${"%.1f".format(wordCount.toDouble() / sentenceCount)} —Å–ª–æ–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                    
                    emit(ProcessingProgress("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 100, stats))
                } else {
                    emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å PDF —Ñ–∞–π–ª."))
                }
            } else {
                emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª."))
            }
        } catch (e: Exception) {
            emit(ProcessingProgress("–û—à–∏–±–∫–∞", 100, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ${e.message}"))
        }
    }
}
