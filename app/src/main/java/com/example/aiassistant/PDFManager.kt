package com.example.aiassistant

import android.content.ContentResolver
import android.content.Context
import android.net.Uri
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import java.io.InputStream
import java.util.*
import kotlin.math.min

class AdvancedPDFManager(private val context: Context, private val knowledgeManager: KnowledgeManager) {
    
    data class ProcessingProgress(
        val step: String,
        val progress: Int,
        val message: String
    )
    
    data class BookContent(
        val title: String,
        val chapters: List<Chapter>,
        val keyConcepts: Map<String, List<String>>,
        val summary: String,
        val rawText: String
    )
    
    data class Chapter(
        val title: String,
        val content: String,
        val paragraphs: List<String>,
        val keyPoints: List<String>
    )
    
    private var currentBook: BookContent? = null
    private val bookMemory = mutableMapOf<String, BookContent>()
    
    fun learnFromPDF(pdfUri: Uri): Flow<ProcessingProgress> = flow {
        emit(ProcessingProgress("üìñ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏", 0, "–û—Ç–∫—Ä—ã–≤–∞—é PDF —Ñ–∞–π–ª..."))
        
        try {
            val contentResolver: ContentResolver = context.contentResolver
            
            val inputStream = withContext(Dispatchers.IO) {
                try {
                    contentResolver.openInputStream(pdfUri)
                } catch (e: Exception) {
                    null
                }
            }
            
            if (inputStream != null) {
                emit(ProcessingProgress("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", 20, "–ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF..."))
                
                val text = withContext(Dispatchers.IO) {
                    try {
                        inputStream.bufferedReader().use { it.readText() }
                    } catch (e: Exception) {
                        ""
                    } finally {
                        try {
                            inputStream.close()
                        } catch (e: Exception) {
                            // Ignore
                        }
                    }
                }
                
                if (text.isNotEmpty() && text.length > 100) {
                    emit(ProcessingProgress("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", 40, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏..."))
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–∏–≥—É
                    val book = analyzeBookStructure(text)
                    currentBook = book
                    bookMemory[book.title] = book
                    
                    emit(ProcessingProgress("üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π", 60, "–ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏..."))
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞–Ω–∏—è
                    val concepts = extractKeyConcepts(book)
                    
                    emit(ProcessingProgress("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 80, "–°–æ—Ö—Ä–∞–Ω—è—é –∑–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É..."))
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                    saveBookToKnowledge(book, concepts)
                    
                    val stats = """
                        ‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!
                        
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                        ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}
                        ‚Ä¢ –ì–ª–∞–≤: ${book.chapters.size}
                        ‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ü–∏–π: ${concepts.size}
                        ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: ${text.length}
                        
                        –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–Ω–∏–≥–∏!
                        –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
                        ‚Ä¢ "–û —á–µ–º —ç—Ç–∞ –∫–Ω–∏–≥–∞?"
                        ‚Ä¢ "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –≤ –≥–ª–∞–≤–µ 1?"
                        ‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏]"
                        ‚Ä¢ "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–µ –≥–µ—Ä–æ–∏?"
                        ‚Ä¢ "–í —á–µ–º –æ—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å –∫–Ω–∏–≥–∏?"
                    """.trimIndent()
                    
                    emit(ProcessingProgress("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 100, stats))
                } else {
                    emit(ProcessingProgress("‚ùå –û—à–∏–±–∫–∞", 100, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"))
                }
            } else {
                emit(ProcessingProgress("‚ùå –û—à–∏–±–∫–∞", 100, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª"))
            }
        } catch (e: Exception) {
            emit(ProcessingProgress("‚ùå –û—à–∏–±–∫–∞", 100, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}"))
        }
    }
    
    private fun analyzeBookStructure(text: String): BookContent {
        val lines = text.lines()
        val title = extractTitle(lines) ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞"
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥–ª–∞–≤—ã
        val chapters = extractChapters(text)
        
        // –°–æ–∑–¥–∞–µ–º summary
        val summary = generateSummary(text)
        
        return BookContent(
            title = title,
            chapters = chapters,
            keyConcepts = emptyMap(),
            summary = summary,
            rawText = text
        )
    }
    
    private fun extractTitle(lines: List<String>): String? {
        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
        for (i in 0 until min(10, lines.size)) {
            val line = lines[i].trim()
            if (line.length in 10..100 && 
                line.any { it.isUpperCase() } && 
                line.split(" ").size in 2..10) {
                return line
            }
        }
        return null
    }
    
    private fun extractChapters(text: String): List<Chapter> {
        val chapters = mutableListOf<Chapter>()
        val chapterPatterns = listOf(
            Regex("–ì–ª–∞–≤–∞\\s+\\d+", RegexOption.IGNORE_CASE),
            Regex("Chapter\\s+\\d+", RegexOption.IGNORE_CASE),
            Regex("\\d+\\.\\s+[–ê-–Ø].+"),
            Regex("\\n[–ê-–Ø][–ê-–Ø–ê-–Ø\\s]{10,}\\n")
        )
        
        val sections = text.split(Regex("\\n\\s*\\n"))
        var currentChapter = "–í–≤–µ–¥–µ–Ω–∏–µ"
        var currentContent = StringBuilder()
        
        sections.forEach { section ->
            if (section.trim().length > 50) {
                val isChapterStart = chapterPatterns.any { it.containsMatchIn(section) }
                
                if (isChapterStart && currentContent.isNotEmpty()) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–ª–∞–≤—É
                    chapters.add(createChapter(currentChapter, currentContent.toString()))
                    currentChapter = section.trim()
                    currentContent = StringBuilder()
                }
                
                currentContent.append(section).append("\n\n")
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–ª–∞–≤—É
        if (currentContent.isNotEmpty()) {
            chapters.add(createChapter(currentChapter, currentContent.toString()))
        }
        
        return chapters.take(20) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤
    }
    
    private fun createChapter(title: String, content: String): Chapter {
        val paragraphs = content.split(Regex("\\n\\s*\\n"))
            .filter { it.trim().length > 20 }
            .take(50)
        
        val keyPoints = extractKeyPoints(content)
        
        return Chapter(
            title = title,
            content = content,
            paragraphs = paragraphs,
            keyPoints = keyPoints
        )
    }
    
    private fun extractKeyPoints(text: String): List<String> {
        val sentences = text.split('.', '!', '?')
            .map { it.trim() }
            .filter { it.length in 30..200 }
        
        val keyWords = listOf("–≤–∞–∂–Ω–æ", "–∫–ª—é—á–µ–≤–æ–π", "–æ—Å–Ω–æ–≤–Ω–æ–π", "–≥–ª–∞–≤–Ω—ã–π", "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", 
                             "—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º", "–≤—ã–≤–æ–¥", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
        
        return sentences
            .filter { sentence ->
                keyWords.any { keyword -> 
                    sentence.contains(keyword, ignoreCase = true) 
                } || sentence.split(' ').size in 8..25
            }
            .take(10)
    }
    
    private fun generateSummary(text: String): String {
        val sentences = text.split('.', '!', '?')
            .map { it.trim() }
            .filter { it.length > 20 }
        
        val importantSentences = sentences
            .filter { 
                it.split(' ').size in 10..30 &&
                it.any { char -> char.isUpperCase() } &&
                !it.contains("http") 
            }
            .take(5)
        
        return if (importantSentences.size >= 3) {
            importantSentences.joinToString(". ") + "."
        } else {
            "–≠—Ç–∞ –∫–Ω–∏–≥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ."
        }
    }
    
    private fun extractKeyConcepts(book: BookContent): Map<String, List<String>> {
        val concepts = mutableMapOf<String, List<String>>()
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –≥–ª–∞–≤
        book.chapters.forEach { chapter ->
            val chapterConcepts = extractConceptsFromText(chapter.content)
            concepts[chapter.title] = chapterConcepts
        }
        
        return concepts
    }
    
    private fun extractConceptsFromText(text: String): List<String> {
        val words = text.split(' ', ',', '.', '!', '?')
            .filter { it.length > 4 }
            .map { it.toLowerCase(Locale.getDefault()) }
        
        val wordFrequency = mutableMapOf<String, Int>()
        words.forEach { word ->
            wordFrequency[word] = wordFrequency.getOrDefault(word, 0) + 1
        }
        
        return wordFrequency.entries
            .sortedByDescending { it.value }
            .take(15)
            .map { it.key }
    }
    
    private fun saveBookToKnowledge(book: BookContent, concepts: Map<String, List<String>>) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        knowledgeManager.learn("–æ —á–µ–º –∫–Ω–∏–≥–∞ ${book.title}", book.summary)
        knowledgeManager.learn("—Ç–µ–º–∞ –∫–Ω–∏–≥–∏ ${book.title}", book.summary)
        knowledgeManager.learn("–æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è ${book.title}", book.summary)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≤–∞—Ö
        book.chapters.forEachIndexed { index, chapter ->
            knowledgeManager.learn("–≥–ª–∞–≤–∞ ${index + 1} ${book.title}", chapter.title + ": " + chapter.keyPoints.take(3).joinToString())
            knowledgeManager.learn("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∞–≤—ã ${index + 1} ${book.title}", chapter.content.take(500))
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        concepts.forEach { (chapter, conceptList) ->
            conceptList.forEach { concept ->
                val explanation = findConceptExplanation(concept, book.rawText)
                if (explanation.isNotEmpty()) {
                    knowledgeManager.learn("—á—Ç–æ —Ç–∞–∫–æ–µ $concept", explanation)
                    knowledgeManager.learn("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ $concept", explanation)
                    knowledgeManager.learn("$concept –≤ –∫–Ω–∏–≥–µ ${book.title}", explanation)
                }
            }
        }
    }
    
    private fun findConceptExplanation(concept: String, text: String): String {
        val sentences = text.split('.', '!', '?')
            .map { it.trim() }
            .filter { it.contains(concept, ignoreCase = true) && it.length in 30..300 }
        
        return sentences.take(2).joinToString(". ") + "."
    }
    
    fun askAboutBook(question: String): String {
        val book = currentBook ?: return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª —Å –∫–Ω–∏–≥–æ–π."
        
        return when {
            question.contains("–æ —á–µ–º", ignoreCase = true) || 
            question.contains("—Ç–µ–º–∞", ignoreCase = true) -> {
                "üìñ ${book.title}\n\n${book.summary}"
            }
            
            question.contains("–≥–ª–∞–≤–∞", ignoreCase = true) -> {
                handleChapterQuestion(question, book)
            }
            
            question.contains("—á—Ç–æ —Ç–∞–∫–æ–µ", ignoreCase = true) ||
            question.contains("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", ignoreCase = true) ||
            question.contains("–æ–±—ä—è—Å–Ω–∏", ignoreCase = true) -> {
                handleConceptQuestion(question, book)
            }
            
            question.contains("–æ—Å–Ω–æ–≤–Ω", ignoreCase = true) -> {
                "üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∫–Ω–∏–≥–∏ \"${book.title}\":\n\n" +
                book.chapters.flatMap { it.keyPoints }.take(5).joinToString("\n‚Ä¢ ") { "‚Ä¢ $it" }
            }
            
            question.contains("–ø–µ—Ä—Å–æ–Ω–∞–∂", ignoreCase = true) ||
            question.contains("–≥–µ—Ä–æ–π", ignoreCase = true) -> {
                "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∫–Ω–∏–≥–∏:\n\n" +
                extractCharacters(book.rawText).joinToString("\n‚Ä¢ ") { "‚Ä¢ $it" }
            }
            
            else -> {
                // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                semanticSearch(question, book)
            }
        }
    }
    
    private fun handleChapterQuestion(question: String, book: BookContent): String {
        val chapterPattern = Regex("–≥–ª–∞–≤–∞\\s*(\\d+)", RegexOption.IGNORE_CASE)
        val match = chapterPattern.find(question)
        
        return if (match != null) {
            val chapterNum = match.groupValues[1].toIntOrNull()
            if (chapterNum != null && chapterNum in 1..book.chapters.size) {
                val chapter = book.chapters[chapterNum - 1]
                "üìë ${chapter.title}\n\n" +
                "–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n" +
                chapter.keyPoints.take(5).joinToString("\n‚Ä¢ ") { "‚Ä¢ $it" } +
                "\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${chapter.content.take(300)}..."
            } else {
                "–ì–ª–∞–≤–∞ $chapterNum –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í –∫–Ω–∏–≥–µ ${book.chapters.size} –≥–ª–∞–≤."
            }
        } else {
            "–°–ø–∏—Å–æ–∫ –≥–ª–∞–≤:\n" +
            book.chapters.take(10).mapIndexed { index, chapter -> 
                "${index + 1}. ${chapter.title.take(50)}..."
            }.joinToString("\n")
        }
    }
    
    private fun handleConceptQuestion(question: String, book: BookContent): String {
        val concept = question
            .replace("—á—Ç–æ —Ç–∞–∫–æ–µ", "", ignoreCase = true)
            .replace("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "", ignoreCase = true)
            .replace("–æ–±—ä—è—Å–Ω–∏", "", ignoreCase = true)
            .replace("–∫–Ω–∏–≥[–∞–µ–∏]", "", ignoreCase = true)
            .trim()
        
        if (concept.length < 3) {
            return "–£—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–∞–∫–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
        }
        
        // –ò—â–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
        val explanation = findConceptExplanation(concept, book.rawText)
        
        return if (explanation.isNotEmpty()) {
            "üìö –ö–æ–Ω—Ü–µ–ø—Ü–∏—è \"$concept\" –≤ –∫–Ω–∏–≥–µ \"${book.title}\":\n\n$explanation"
        } else {
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \"$concept\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–Ω–∏–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        }
    }
    
    private fun extractCharacters(text: String): List<String> {
        // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        val lines = text.lines()
        val potentialCharacters = mutableSetOf<String>()
        
        lines.forEach { line ->
            val words = line.split(' ')
            words.forEach { word ->
                if (word.length > 3 && word[0].isUpperCase() && !word[0].isLowerCase()) {
                    if (word !in listOf("–ì–ª–∞–≤–∞", "Chapter", "–ö–Ω–∏–≥–∞", "Book")) {
                        potentialCharacters.add(word)
                    }
                }
            }
        }
        
        return potentialCharacters.take(10).toList()
    }
    
    private fun semanticSearch(question: String, book: BookContent): String {
        val questionWords = question.toLowerCase().split(' ').filter { it.length > 3 }
        
        // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        val relevantChunks = findRelevantTextChunks(questionWords, book.rawText)
        
        return if (relevantChunks.isNotEmpty()) {
            "üîç –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –∫–Ω–∏–≥–µ –Ω–∞–π–¥–µ–Ω–æ:\n\n" +
            relevantChunks.take(3).joinToString("\n\n") { "‚Ä¢ $it" } +
            "\n\n–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        } else {
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–Ω–∏–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ –∏–∑ –∫–Ω–∏–≥–∏."
        }
    }
    
    private fun findRelevantTextChunks(questionWords: List<String>, text: String): List<String> {
        val paragraphs = text.split(Regex("\\n\\s*\\n"))
            .filter { it.length in 50..500 }
        
        return paragraphs.filter { paragraph ->
            val paragraphLower = paragraph.toLowerCase()
            questionWords.count { word -> paragraphLower.contains(word) } >= 1
        }.take(5)
    }
    
    fun getCurrentBookTitle(): String {
        return currentBook?.title ?: "–ö–Ω–∏–≥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    }
    
    fun hasBook(): Boolean {
        return currentBook != null
    }
}
