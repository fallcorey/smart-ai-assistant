package com.example.aiassistant

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.jsoup.Jsoup
import java.net.URLEncoder

class WebSearchManager {
    
    suspend fun searchWeb(query: String): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val encodedQuery = URLEncoder.encode(query, "UTF-8")
            val searchUrl = "https://www.google.com/search?q=$encodedQuery&num=5"
            
            val doc: org.jsoup.nodes.Document = Jsoup.connect(searchUrl)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                .timeout(10000)
                .get()
            
            val results = doc.select("h3") // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            val descriptions = doc.select("div.VwiC3b") // –û–ø–∏—Å–∞–Ω–∏—è
            
            if (results.isNotEmpty()) {
                val topResults = results.take(3).mapIndexed { index, element ->
                    val title = element.text()
                    val desc = if (descriptions.size > index) descriptions[index].text() else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    "‚Ä¢ $title\n  $desc"
                }
                
                "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$query\":**\n\n${topResults.joinToString("\n\n")}"
            } else {
                "‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"$query\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."
            }
        } catch (e: Exception) {
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.\n\n–û—à–∏–±–∫–∞: ${e.message}"
        }
    }
    
    suspend fun getQuickAnswer(question: String): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val encodedQuestion = URLEncoder.encode(question, "UTF-8")
            val searchUrl = "https://www.google.com/search?q=$encodedQuestion"
            
            val doc: org.jsoup.nodes.Document = Jsoup.connect(searchUrl)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .timeout(8000)
                .get()
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç (featured snippet)
            val quickAnswer = doc.select("div.ILfuVd, div.XcVN5d, div.zCubwf") // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ Google
            
            if (quickAnswer.isNotEmpty()) {
                val answer = quickAnswer.first().text()
                if (answer.length > 50) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
                    "üéØ **–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n$answer"
                } else {
                    "‚ÑπÔ∏è –ù–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n\n${getSearchSummary(question)}"
                }
            } else {
                "‚ÑπÔ∏è –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. ${getSearchSummary(question)}"
            }
        } catch (e: Exception) {
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. ${e.message}"
        }
    }
    
    private suspend fun getSearchSummary(query: String): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val results = searchWeb(query)
            if (results.contains("‚ùå") || results.contains("‚ö†Ô∏è")) {
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
            } else {
                // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                results.split("\n\n").take(2).joinToString("\n\n")
            }
        } catch (e: Exception) {
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        }
    }
    
    suspend fun getNews(topic: String = "–Ω–æ–≤–æ—Å—Ç–∏"): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val encodedTopic = URLEncoder.encode(topic, "UTF-8")
            val newsUrl = "https://news.google.com/search?q=$encodedTopic&hl=ru&gl=RU&ceid=RU:ru"
            
            val doc: org.jsoup.nodes.Document = Jsoup.connect(newsUrl)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .timeout(10000)
                .get()
            
            val articles = doc.select("article") // –ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            
            if (articles.isNotEmpty()) {
                val newsItems = articles.take(5).map { article ->
                    val titleElement = article.select("h3 a")
                    val title = titleElement.text()
                    val source = article.select("div.SVJrMe a").text()
                    "‚Ä¢ $title\n  üì∞ $source"
                }
                
                "üì∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ \"$topic\":**\n\n${newsItems.joinToString("\n\n")}"
            } else {
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }
        } catch (e: Exception) {
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: ${e.message}"
        }
    }
}
