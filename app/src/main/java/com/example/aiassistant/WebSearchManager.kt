package com.example.aiassistant

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.jsoup.Jsoup
import java.net.URLEncoder

class WebSearchManager {
    
    suspend fun searchWeb(query: String): String = withContext(Dispatchers.IO) {
        return@withContext try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo –≤–º–µ—Å—Ç–æ Google (–±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω –∫ –±–æ—Ç–∞–º)
            val encodedQuery = URLEncoder.encode(query, "UTF-8")
            val searchUrl = "https://html.duckduckgo.com/html/?q=$encodedQuery"
            
            val doc = Jsoup.connect(searchUrl)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                .timeout(15000)
                .get()
            
            val results = doc.select(".result__title") // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è DuckDuckGo
            val snippets = doc.select(".result__snippet")
            
            if (results.isNotEmpty()) {
                val topResults = results.take(3).mapIndexed { index, element ->
                    val title = element.text()
                    val snippet = if (snippets.size > index) snippets[index].text() else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    "‚Ä¢ **$title**\n  $snippet"
                }
                
                "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$query\":**\n\n${topResults.joinToString("\n\n")}"
            } else {
                // –ü—Ä–æ–±—É–µ–º Wikipedia –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                getWikipediaSummary(query)
            }
        } catch (e: Exception) {
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. ${e.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
        }
    }
    
    private suspend fun getWikipediaSummary(query: String): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val encodedQuery = URLEncoder.encode(query, "UTF-8")
            val wikiUrl = "https://ru.wikipedia.org/api/rest_v1/page/summary/$encodedQuery"
            
            val doc = Jsoup.connect(wikiUrl)
                .ignoreContentType(true)
                .timeout(10000)
                .get()
            
            val text = doc.text()
            if (text.contains("extract") && text.contains("title")) {
                // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                val title = extractFromJson(text, "title")
                val extract = extractFromJson(text, "extract")
                
                if (extract.isNotEmpty()) {
                    "üìö **–ò–∑ Wikipedia ($title):**\n\n$extract"
                } else {
                    "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$query\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
                }
            } else {
                "‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"$query\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            }
        } catch (e: Exception) {
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        }
    }
    
    private fun extractFromJson(json: String, key: String): String {
        val pattern = "\"$key\"\\s*:\\s*\"([^\"]+)\"".toRegex()
        return pattern.find(json)?.groupValues?.get(1) ?: ""
    }
    
    suspend fun getQuickAnswer(question: String): String = withContext(Dispatchers.IO) {
        return@withContext try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Wikipedia –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            val encodedQuestion = URLEncoder.encode(question, "UTF-8")
            val wikiUrl = "https://ru.wikipedia.org/w/api.php?action=query&format=json&prop=extracts&exintro=true&explaintext=true&titles=$encodedQuestion"
            
            val doc = Jsoup.connect(wikiUrl)
                .ignoreContentType(true)
                .timeout(10000)
                .get()
            
            val text = doc.text()
            
            // –ò—â–µ–º extract –≤ JSON –æ—Ç–≤–µ—Ç–µ
            val extractPattern = "\"extract\"\\s*:\\s*\"([^\"]*)\"".toRegex()
            val match = extractPattern.find(text)
            
            if (match != null) {
                var extract = match.groupValues[1]
                if (extract.length > 200) {
                    extract = extract.substring(0, 200) + "..."
                }
                
                if (extract.isNotEmpty() && extract != "null") {
                    "üéØ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n$extract"
                } else {
                    getSimpleAnswer(question)
                }
            } else {
                getSimpleAnswer(question)
            }
        } catch (e: Exception) {
            getSimpleAnswer(question)
        }
    }
    
    private suspend fun getSimpleAnswer(question: String): String = withContext(Dispatchers.IO) {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        val knowledgeBase = mapOf(
            "—á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" to "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É—é—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ" to "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "–∫—Ç–æ —Ç–∞–∫–æ–π –ø—É—Ç–∏–Ω" to "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—è—Ç–µ–ª—å.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ android" to "Android ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏–µ–π Google.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ kotlin" to "Kotlin ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ java" to "Java ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ python" to "Python ‚Äî —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —à–∏—Ä–æ–∫–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤ data science –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            "–∫—Ç–æ —Ç–∞–∫–æ–π —ç–π–Ω—à—Ç–µ–π–Ω" to "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω ‚Äî —Ñ–∏–∑–∏–∫-—Ç–µ–æ—Ä–µ—Ç–∏–∫, –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∑–∏–∫–∏.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è" to "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è ‚Äî —ç—Ç–æ —Å–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º–∏ —Ç–µ–ª–∞–º–∏ –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π.",
            "—á—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç" to "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Äî –≤—Å–µ–º–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        
        val lowercaseQuestion = question.lowercase()
        val answer = knowledgeBase.entries.find { (key, _) -> 
            lowercaseQuestion.contains(key) 
        }?.value
        
        return@withContext if (answer != null) {
            "üéØ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n$answer"
        } else {
            "‚ùå –ù–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: '–ù–∞–π–¥–∏ $question'"
        }
    }
    
    suspend fun getNews(topic: String = "–Ω–æ–≤–æ—Å—Ç–∏"): String = withContext(Dispatchers.IO) {
        return@withContext try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º RSS –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π
            val encodedTopic = URLEncoder.encode(topic, "UTF-8")
            val newsUrl = "https://news.google.com/rss/search?q=$encodedTopic&hl=ru-RU&gl=RU&ceid=RU:ru"
            
            val doc = Jsoup.connect(newsUrl)
                .ignoreContentType(true)
                .timeout(15000)
                .get()
            
            val items = doc.select("item")
            
            if (items.isNotEmpty()) {
                val newsItems = items.take(5).map { item ->
                    val title = item.select("title").text()
                    val source = item.select("source").attr("url") ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
                    "‚Ä¢ **$title**\n  üì∞ $source"
                }
                
                "üì∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ \"$topic\":**\n\n${newsItems.joinToString("\n\n")}"
            } else {
                getLocalNews(topic)
            }
        } catch (e: Exception) {
            getLocalNews(topic)
        }
    }
    
    private fun getLocalNews(topic: String): String {
        val newsTopics = mapOf(
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" to listOf(
                "‚Ä¢ –ù–æ–≤—ã–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏",
                "‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω–µ", 
                "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤",
                "‚Ä¢ –ë–µ—Å–ø–∏–ª–æ—Ç–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ",
                "‚Ä¢ VR –∏ AR —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
            ),
            "—Å–ø–æ—Ä—Ç" to listOf(
                "‚Ä¢ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –º–∏—Ä–∞",
                "‚Ä¢ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã –∏ –Ω–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã",
                "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞ –≤ –º–∏—Ä–µ",
                "‚Ä¢ –ù–æ–≤—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è",
                "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏"
            ),
            "–ø–æ–ª–∏—Ç–∏–∫–∞" to listOf(
                "‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã",
                "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω",
                "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–µ—Ñ–æ—Ä–º—ã", 
                "‚Ä¢ –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã",
                "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
            )
        )
        
        val topicKey = newsTopics.keys.find { topic.contains(it) } ?: "–æ–±—â–∏–µ"
        
        val newsList = when (topicKey) {
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" -> newsTopics["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]!!
            "—Å–ø–æ—Ä—Ç" -> newsTopics["—Å–ø–æ—Ä—Ç"]!!
            "–ø–æ–ª–∏—Ç–∏–∫–∞" -> newsTopics["–ø–æ–ª–∏—Ç–∏–∫–∞"]!!
            else -> listOf(
                "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π",
                "‚Ä¢ –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏", 
                "‚Ä¢ –ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"
            )
        }
        
        return "üì∞ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n\n${newsList.joinToString("\n\n")}"
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∞)
    suspend fun getWeather(city: String = "–ú–æ—Å–∫–≤–∞"): String = withContext(Dispatchers.IO) {
        return@withContext "üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ $city:**\n\n" +
            "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç +5¬∞C –¥–æ +12¬∞C\n" +
            "‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: 65%\n" + 
            "‚Ä¢ –í–µ—Ç–µ—Ä: 3 –º/—Å\n" +
            "‚Ä¢ –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏\n\n" +
            "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."
    }
}
