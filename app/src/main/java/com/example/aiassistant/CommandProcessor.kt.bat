package com.example.aiassistant

import android.content.Context
import android.content.Intent
import android.provider.AlarmClock
import android.provider.CalendarContract
import android.provider.MediaStore
import android.speech.tts.TextToSpeech
import java.text.SimpleDateFormat
import java.util.*

class CommandProcessor(private val context: Context) {
    
    fun processCommand(message: String): CommandResult {
        val lowerMessage = message.lowercase()
        
        return when {
            // üéØ –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´
            lowerMessage.contains("–æ—á–∏—Å—Ç") || lowerMessage.contains("—É–¥–∞–ª") -> 
                CommandResult(CommandType.CLEAR_CHAT, "–ß–∞—Ç –æ—á–∏—â–µ–Ω")
            
            lowerMessage.contains("–ø–æ–º–æ—â—å") || lowerMessage.contains("–∫–æ–º–∞–Ω–¥—ã") -> 
                CommandResult(CommandType.HELP, getHelpMessage())
            
            lowerMessage.contains("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏") -> 
                CommandResult(CommandType.SETTINGS, "–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            // üïê –í–†–ï–ú–Ø –ò –î–ê–¢–ê
            lowerMessage.contains("–≤—Ä–µ–º—è") || lowerMessage.contains("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") -> 
                CommandResult(CommandType.TIME, getCurrentTime())
            
            lowerMessage.contains("–¥–∞—Ç–∞") || lowerMessage.contains("–∫–∞–∫–æ–µ —á–∏—Å–ª–æ") -> 
                CommandResult(CommandType.DATE, getCurrentDate())
            
            lowerMessage.contains("–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏") -> 
                CommandResult(CommandType.DAY_OF_WEEK, getCurrentDayOfWeek())
            
            // ‚è∞ –ë–£–î–ò–õ–¨–ù–ò–ö–ò –ò –¢–ê–ô–ú–ï–†–´
            lowerMessage.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") && lowerMessage.contains("—É—Å—Ç–∞–Ω–æ–≤") -> 
                CommandResult(CommandType.ALARM, setAlarm(message))
            
            lowerMessage.contains("—Ç–∞–π–º–µ—Ä") -> 
                CommandResult(CommandType.TIMER, setTimer(message))
            
            // üìû –ó–í–û–ù–ö–ò –ò –°–û–û–ë–©–ï–ù–ò–Ø
            lowerMessage.contains("–ø–æ–∑–≤–æ–Ω–∏") -> 
                CommandResult(CommandType.CALL, makePhoneCall(message))
            
            lowerMessage.contains("—Å–º—Å") || lowerMessage.contains("—Å–æ–æ–±—â–µ–Ω–∏–µ") -> 
                CommandResult(CommandType.SMS, sendSMS(message))
            
            // üéµ –ú–£–ó–´–ö–ê –ò –ú–ï–î–ò–ê
            lowerMessage.contains("–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É") -> 
                CommandResult(CommandType.MUSIC_PLAY, "–í–∫–ª—é—á–∞—é –º—É–∑—ã–∫—É")
            
            lowerMessage.contains("–ø–∞—É–∑–∞") || lowerMessage.contains("–æ—Å—Ç–∞–Ω–æ–≤–∏ –º—É–∑—ã–∫—É") -> 
                CommandResult(CommandType.MUSIC_PAUSE, "–ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ")
            
            lowerMessage.contains("—Å–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è") -> 
                CommandResult(CommandType.MUSIC_NEXT, "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—é")
            
            // üìç –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï
            lowerMessage.contains("–≥–¥–µ —è") -> 
                CommandResult(CommandType.LOCATION, "–û–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...")
            
            lowerMessage.contains("–º–∞—Ä—à—Ä—É—Ç") -> 
                CommandResult(CommandType.NAVIGATION, "–°—Ç—Ä–æ—é –º–∞—Ä—à—Ä—É—Ç...")
            
            // üìÖ –ö–ê–õ–ï–ù–î–ê–†–¨ –ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
            lowerMessage.contains("—Å–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ") -> 
                CommandResult(CommandType.CALENDAR, createCalendarEvent(message))
            
            lowerMessage.contains("–Ω–∞–ø–æ–º–Ω–∏") -> 
                CommandResult(CommandType.REMINDER, createReminder(message))
            
            // ‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
            lowerMessage.contains("—è—Ä–∫–æ—Å—Ç—å") -> 
                CommandResult(CommandType.BRIGHTNESS, adjustBrightness(message))
            
            lowerMessage.contains("–≥—Ä–æ–º–∫–æ—Å—Ç—å") -> 
                CommandResult(CommandType.VOLUME, adjustVolume(message))
            
            // üîç –ü–û–ò–°–ö
            lowerMessage.contains("–Ω–∞–π–¥–∏") || lowerMessage.contains("–ø–æ–∏—Å–∫") -> 
                CommandResult(CommandType.SEARCH, "–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
            
            // üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
            lowerMessage.contains("—à—É—Ç–∫–∞") -> 
                CommandResult(CommandType.JOKE, "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —à—É—Ç–∫—É...")
            
            lowerMessage.contains("—Ñ–∞–∫—Ç") -> 
                CommandResult(CommandType.FACT, "–î–µ–ª—é—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º...")
            
            // üìö –û–ë–£–ß–ï–ù–ò–ï
            lowerMessage.contains("–ø–µ—Ä–µ–≤–æ–¥") -> 
                CommandResult(CommandType.TRANSLATE, "–í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥...")
            
            lowerMessage.contains("–æ–±—ä—è—Å–Ω–∏") -> 
                CommandResult(CommandType.EXPLAIN, "–û–±—ä—è—Å–Ω—è—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é...")
            
            else -> CommandResult(CommandType.UNKNOWN, "")
        }
    }
    
    fun executeSystemCommand(message: String): Boolean {
        val lowerMessage = message.lowercase()
        
        return try {
            when {
                lowerMessage.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") && hasTimePattern(message) -> {
                    setSystemAlarm(message)
                    true
                }
                lowerMessage.contains("—Ç–∞–π–º–µ—Ä") && hasTimePattern(message) -> {
                    setSystemTimer(message)
                    true
                }
                lowerMessage.contains("—Å–æ–±—ã—Ç–∏–µ") -> {
                    createSystemCalendarEvent(message)
                    true
                }
                else -> false
            }
        } catch (e: Exception) {
            false
        }
    }
    
    private fun getHelpMessage(): String {
        return """
        üéØ **–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:**

        üïê **–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞:**
        ‚Ä¢ "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?" - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
        ‚Ä¢ "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ?" - —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É  
        ‚Ä¢ "–ö–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏?" - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

        ‚è∞ **–ë—É–¥–∏–ª—å–Ω–∏–∫–∏ –∏ —Ç–∞–π–º–µ—Ä—ã:**
        ‚Ä¢ "–£—Å—Ç–∞–Ω–æ–≤–∏ –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 7:30"
        ‚Ä¢ "–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç"

        üìû **–ó–≤–æ–Ω–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è:**
        ‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏ –º–∞–º–µ"
        ‚Ä¢ "–û—Ç–ø—Ä–∞–≤—å SMS –ü—Ä–∏–≤–µ—Ç"

        üéµ **–ú—É–∑—ã–∫–∞ –∏ –º–µ–¥–∏–∞:**
        ‚Ä¢ "–í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É"
        ‚Ä¢ "–ü–∞—É–∑–∞", "–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è"

        üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:**
        ‚Ä¢ "–ì–¥–µ —è?"
        ‚Ä¢ "–ü–æ—Å—Ç—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–æ —Ä–∞–±–æ—Ç—ã"

        üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å:**
        ‚Ä¢ "–°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00"
        ‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"

        ‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**
        ‚Ä¢ "–£–≤–µ–ª–∏—á—å —è—Ä–∫–æ—Å—Ç—å"
        ‚Ä¢ "–£–º–µ–Ω—å—à–∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å"

        üîç **–ü–æ–∏—Å–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
        ‚Ä¢ "–ù–∞–π–¥–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º"
        ‚Ä¢ "–ü–æ–∏—Å–∫ –∫–æ—à–∫–∏ –≤–∏–¥–µ–æ"

        üéÆ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
        ‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É"
        ‚Ä¢ "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"

        üìö **–û–±—É—á–µ–Ω–∏–µ:**
        ‚Ä¢ "–ü–µ—Ä–µ–≤–µ—Ç hello –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
        ‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ AI"

        üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
        ‚Ä¢ "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"
        ‚Ä¢ "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏"

        üè• **–ó–¥–æ—Ä–æ–≤—å–µ:**
        ‚Ä¢ "–†–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–∏"
        ‚Ä¢ "–†–µ–∫–æ–º–µ–Ω–¥—É–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"

        üç≥ **–ö—É–ª–∏–Ω–∞—Ä–∏—è:**
        ‚Ä¢ "–†–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã"
        ‚Ä¢ "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —è–±–ª–æ–∫–∞"

        –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!
        """.trimIndent()
    }
    
    private fun getCurrentTime(): String {
        val time = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
        return "üïê –°–µ–π—á–∞—Å $time"
    }
    
    private fun getCurrentDate(): String {
        val date = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault()).format(Date())
        return "üìÖ –°–µ–≥–æ–¥–Ω—è $date"
    }
    
    private fun getCurrentDayOfWeek(): String {
        val days = listOf("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞")
        val calendar = Calendar.getInstance()
        val dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1
        return "üìÜ –°–µ–≥–æ–¥–Ω—è ${days[dayOfWeek]}"
    }
    
    private fun setAlarm(message: String): String {
        return "‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun setTimer(message: String): String {
        return "‚è±Ô∏è –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun makePhoneCall(message: String): String {
        return "üìû –í—ã–ø–æ–ª–Ω—è—é –∑–≤–æ–Ω–æ–∫... (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun sendSMS(message: String): String {
        return "üí¨ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ... (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun createCalendarEvent(message: String): String {
        return "üìÖ –°–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ... (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun createReminder(message: String): String {
        return "‚è∞ –°–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ... (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun adjustBrightness(message: String): String {
        return "‚òÄÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —è—Ä–∫–æ—Å—Ç—å... (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun adjustVolume(message: String): String {
        return "üîä –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å... (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    }
    
    private fun hasTimePattern(message: String): Boolean {
        val timePattern = Regex("""(\d{1,2}):(\d{2})""")
        return timePattern.containsMatchIn(message)
    }
    
    private fun setSystemAlarm(message: String): Boolean {
        return try {
            val timePattern = Regex("""(\d{1,2}):(\d{2})""")
            val match = timePattern.find(message)
            
            if (match != null) {
                val hours = match.groupValues[1].toInt()
                val minutes = match.groupValues[2].toInt()
                
                val intent = Intent(AlarmClock.ACTION_SET_ALARM).apply {
                    putExtra(AlarmClock.EXTRA_HOUR, hours)
                    putExtra(AlarmClock.EXTRA_MINUTES, minutes)
                    putExtra(AlarmClock.EXTRA_MESSAGE, "–ë—É–¥–∏–ª—å–Ω–∏–∫ –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞")
                    putExtra(AlarmClock.EXTRA_SKIP_UI, true)
                }
                
                if (intent.resolveActivity(context.packageManager) != null) {
                    context.startActivity(intent)
                    true
                } else {
                    false
                }
            } else {
                false
            }
        } catch (e: Exception) {
            false
        }
    }
    
    private fun setSystemTimer(message: String): Boolean {
        return try {
            val durationPattern = Regex("""(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)""")
            val match = durationPattern.find(message)
            
            if (match != null) {
                val duration = match.groupValues[1].toInt()
                val unit = match.groupValues[2]
                
                val seconds = when {
                    unit.contains("—á–∞—Å") -> duration * 3600
                    else -> duration * 60
                }
                
                val intent = Intent(AlarmClock.ACTION_SET_TIMER).apply {
                    putExtra(AlarmClock.EXTRA_LENGTH, seconds)
                    putExtra(AlarmClock.EXTRA_MESSAGE, "–¢–∞–π–º–µ—Ä –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞")
                    putExtra(AlarmClock.EXTRA_SKIP_UI, true)
                }
                
                if (intent.resolveActivity(context.packageManager) != null) {
                    context.startActivity(intent)
                    true
                } else {
                    false
                }
            } else {
                false
            }
        } catch (e: Exception) {
            false
        }
    }
    
    private fun createSystemCalendarEvent(message: String): Boolean {
        return try {
            val intent = Intent(Intent.ACTION_INSERT).apply {
                data = CalendarContract.Events.CONTENT_URI
                putExtra(CalendarContract.Events.TITLE, "–°–æ–±—ã—Ç–∏–µ –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞")
                putExtra(CalendarContract.Events.DESCRIPTION, "–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ AI –ø–æ–º–æ—â–Ω–∏–∫")
            }
            
            if (intent.resolveActivity(context.packageManager) != null) {
                context.startActivity(intent)
                true
            } else {
                false
            }
        } catch (e: Exception) {
            false
        }
    }
}

enum class CommandType {
    UNKNOWN, CLEAR_CHAT, HELP, SETTINGS, TIME, DATE, DAY_OF_WEEK, 
    ALARM, TIMER, CALL, SMS, MUSIC_PLAY, MUSIC_PAUSE, MUSIC_NEXT,
    LOCATION, NAVIGATION, CALENDAR, REMINDER, BRIGHTNESS, VOLUME,
    SEARCH, JOKE, FACT, TRANSLATE, EXPLAIN
}

data class CommandResult(
    val type: CommandType,
    val message: String,
    val data: Any? = null
)
