package com.example.aiassistant

import android.content.Context
import android.content.Intent
import android.provider.AlarmClock
import android.provider.MediaStore

class CommandProcessor(private val context: Context) {
    
    fun processCommand(message: String): String? {
        val lowerMessage = message.lowercase()
        
        return when {
            // –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            lowerMessage.contains("–ø—Ä–∏–≤–µ—Ç") || lowerMessage.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") -> 
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
            // –ö–æ–º–∞–Ω–¥—ã –≤—Ä–µ–º–µ–Ω–∏
            lowerMessage.contains("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å") || lowerMessage.contains("–≤—Ä–µ–º—è") -> {
                val time = java.time.LocalTime.now()
                    .format(java.time.format.DateTimeFormatter.ofPattern("HH:mm"))
                "–°–µ–π—á–∞—Å $time"
            }
            
            // –ö–æ–º–∞–Ω–¥—ã –¥–∞—Ç—ã
            lowerMessage.contains("–∫–∞–∫–æ–µ —á–∏—Å–ª–æ") || lowerMessage.contains("–¥–∞—Ç–∞") -> {
                val date = java.time.LocalDate.now()
                    .format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy"))
                "–°–µ–≥–æ–¥–Ω—è $date"
            }
            
            // –ö–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
            lowerMessage.contains("–ø–æ–º–æ—â—å") || lowerMessage.contains("–∫–æ–º–∞–Ω–¥—ã") -> 
                """üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
                
                üïê **–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞:**
                ‚Ä¢ "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?" - —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
                ‚Ä¢ "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ?" - —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É
                
                üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
                ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
                
                üí¨ **–û–±—â–µ–Ω–∏–µ:**
                ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã
                ‚Ä¢ "–ö–∞–∫ –¥–µ–ª–∞?" - —É–∑–Ω–∞—Ç—å –º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                
                üßπ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
                ‚Ä¢ "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç" - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                
                –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!"""
            
            // –ö–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏
            lowerMessage.contains("–æ—á–∏—Å—Ç") || lowerMessage.contains("—É–¥–∞–ª") -> 
                null // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ MainActivity
            
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            else -> null
        }
    }
    
    fun executeSystemCommand(message: String): Boolean {
        val lowerMessage = message.lowercase()
        
        return when {
            lowerMessage.contains("–±—É–¥–∏–ª—å–Ω–∏–∫") && lowerMessage.contains("—É—Å—Ç–∞–Ω–æ–≤") -> {
                setAlarm(message)
                true
            }
            else -> false
        }
    }
    
    private fun setAlarm(message: String): Boolean {
        return try {
            val timePattern = Regex("""(\d{1,2}):(\d{2})""")
            val match = timePattern.find(message)
            
            if (match != null) {
                val hours = match.groupValues[1].toInt()
                val minutes = match.groupValues[2].toInt()
                
                val intent = Intent(AlarmClock.ACTION_SET_ALARM).apply {
                    putExtra(AlarmClock.EXTRA_HOUR, hours)
                    putExtra(AlarmClock.EXTRA_MINUTES, minutes)
                    putExtra(AlarmClock.EXTRA_MESSAGE, "–ë—É–¥–∏–ª—å–Ω–∏–∫ –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞")
                }
                
                if (intent.resolveActivity(context.packageManager) != null) {
                    context.startActivity(intent)
                    true
                } else {
                    false
                }
            } else {
                false
            }
        } catch (e: Exception) {
            false
        }
    }
}
